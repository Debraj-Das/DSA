[General]
answer_file_save_path=./${basename}_${1-index}.ans
ask_for_loading_external_changes=true
auto_complete_parentheses=true
auto_indent=true
auto_load_external_changes_if_no_unsaved_modification=true
auto_remove_parentheses=true
auto_save=true
auto_save_interval=1000
auto_save_interval_type=After the last modification
auto_uncheck_accepted_testcases=false
beta=false
check_on_testcases_with_empty_output=true
check_update=true
cursor_width=5
custom_application_font=@Variant(\0\0\0@\0\0\0\x1c\0M\0S\0 \0S\0h\0\x65\0l\0l\0 \0\x44\0l\0g\0 \0\x32@\x1f\x33\x33\x33\x33\x33\x33\xff\xff\xff\xff\x5\x1\0\x32\x10)
default_file_paths_for_problem_urls=@Invalid()
default_language=C++
default_time_limit=20000
detached_run_terminal_arguments=-e
detached_run_terminal_program=xterm
display_eoln_in_diff=true
display_stopwatch=true
display_test_case_length_limit=500000
editor_font="@Variant(\0\0\0@\0\0\0$\0\x46\0i\0r\0\x61\0 \0\x43\0o\0\x64\0\x65\0 \0S\0\x65\0m\0i\0\x42\0o\0l\0\x64@,\0\0\0\0\0\0\xff\xff\xff\xff\x5\x1\0?\x10)"
editor_theme=Monokai
extra_bottom_margin=true
file_problem_binding=/home/raj/Downloads/1070.cpp, https://cses.fi/problemset/task/1070/, /home/raj/cs/dsa/Material/youtube/cses/SortingAndSearching/1619.cpp, https://cses.fi/problemset/task/1619, /home/raj/cs/dsa/practice/atcoder_dp/dp_a.cpp, https://atcoder.jp/contests/dp/tasks/dp_a, /home/raj/cs/dsa/practice/atcoder_dp/dp_b.cpp, https://atcoder.jp/contests/dp/tasks/dp_b, /home/raj/cs/dsa/practice/atcoder_dp/dp_c.cpp, https://atcoder.jp/contests/dp/tasks/dp_c, /home/raj/cs/dsa/practice/atcoder_dp/dp_d.cpp, https://atcoder.jp/contests/dp/tasks/dp_d, /home/raj/cs/dsa/practice/atcoder_dp/dp_e.cpp, https://atcoder.jp/contests/dp/tasks/dp_e, /home/raj/cs/dsa/practice/atcoder_dp/dp_f.cpp, https://atcoder.jp/contests/dp/tasks/dp_f, /home/raj/cs/dsa/practice/atcoder_dp/dp_g.cpp, https://atcoder.jp/contests/dp/tasks/dp_g, /home/raj/cs/dsa/practice/atcoder_dp/dp_h.cpp, https://atcoder.jp/contests/dp/tasks/dp_h, /home/raj/cs/dsa/practice/atcoder_dp/dp_i.cpp, https://atcoder.jp/contests/dp/tasks/dp_i, /home/raj/cs/dsa/practice/cf/2128/A.cpp, https://codeforces.com/contest/2128/problem/A, /home/raj/cs/dsa/practice/cf/2128/B.cpp, https://codeforces.com/contest/2128/problem/B, /home/raj/cs/dsa/practice/cf/2128/C.cpp, https://codeforces.com/contest/2128/problem/C, /home/raj/cs/dsa/practice/cf/2128/D.cpp, https://codeforces.com/contest/2128/problem/D, /home/raj/cs/dsa/practice/cf/2128/E1.cpp, https://codeforces.com/contest/2128/problem/E1, /home/raj/cs/dsa/practice/cf/2128/E2.cpp, https://codeforces.com/contest/2128/problem/E2, /home/raj/cs/dsa/practice/cf/2128/F.cpp, https://codeforces.com/contest/2128/problem/F, /home/raj/cs/dsa/practice/cf/A.cpp, https://codeforces.com/contest/2132/problem/A, /home/raj/cs/dsa/practice/cf/B.cpp, https://codeforces.com/contest/2132/problem/B, /home/raj/cs/dsa/practice/cf/C1.cpp, https://codeforces.com/contest/2132/problem/C1, /home/raj/cs/dsa/practice/cf/C2.cpp, https://codeforces.com/contest/2132/problem/C2, /home/raj/cs/dsa/practice/cf/D.cpp, https://codeforces.com/contest/2132/problem/D, /home/raj/cs/dsa/practice/cf/E.cpp, https://codeforces.com/contest/2132/problem/E, /home/raj/cs/dsa/practice/cf/F.cpp, https://codeforces.com/contest/2132/problem/F, /home/raj/cs/dsa/practice/cf/G.cpp, https://codeforces.com/contest/2132/problem/G, /home/raj/cs/dsa/practice/cses introductory problem/1070.cpp, https://cses.fi/problemset/task/1070, /home/raj/cs/dsa/practice/cses introductory problem/1071.cpp, https://cses.fi/problemset/task/1071, /home/raj/cs/dsa/practice/cses introductory problem/1072.cpp, https://cses.fi/problemset/task/1072, /home/raj/cs/dsa/practice/cses introductory problem/1092.cpp, https://cses.fi/problemset/task/1092, /home/raj/cs/dsa/practice/cses introductory problem/1094.cpp, https://cses.fi/problemset/task/1094, /home/raj/cs/dsa/practice/cses introductory problem/1617.cpp, https://cses.fi/problemset/task/1617, /home/raj/cs/dsa/practice/cses introductory problem/1618.cpp, https://cses.fi/problemset/task/1618, /home/raj/cs/dsa/practice/cses introductory problem/1754.cpp, https://cses.fi/problemset/task/1754, /home/raj/cs/dsa/practice/cses/1069.cpp, https://cses.fi/problemset/task/1069, /home/raj/cs/dsa/practice/cses/1073.cpp, https://cses.fi/problemset/task/1073, /home/raj/cs/dsa/practice/cses/1074.cpp, https://cses.fi/problemset/task/1074, /home/raj/cs/dsa/practice/cses/1083.cpp, https://cses.fi/problemset/task/1083, /home/raj/cs/dsa/practice/cses/1085.cpp, https://cses.fi/problemset/task/1085, /home/raj/cs/dsa/practice/cses/1091.cpp, https://cses.fi/problemset/task/1091, /home/raj/cs/dsa/practice/cses/1094.cpp, https://cses.fi/problemset/task/1094/, /home/raj/cs/dsa/practice/cses/1141.cpp, https://cses.fi/problemset/task/1141, /home/raj/cs/dsa/practice/cses/1163.cpp, https://cses.fi/problemset/task/1163, /home/raj/cs/dsa/practice/cses/1164.cpp, https://cses.fi/problemset/task/1164, /home/raj/cs/dsa/practice/cses/1619.cpp, https://cses.fi/problemset/task/1619/, /home/raj/cs/dsa/practice/cses/1620.cpp, https://cses.fi/problemset/task/1620, /home/raj/cs/dsa/practice/cses/1622.cpp, https://cses.fi/problemset/task/1622, /home/raj/cs/dsa/practice/cses/1623.cpp, https://cses.fi/problemset/task/1623, /home/raj/cs/dsa/practice/cses/1624.cpp, https://cses.fi/problemset/task/1624, /home/raj/cs/dsa/practice/cses/1629.cpp, https://cses.fi/problemset/task/1629, /home/raj/cs/dsa/practice/cses/1630.cpp, https://cses.fi/problemset/task/1630, /home/raj/cs/dsa/practice/cses/1631.cpp, https://cses.fi/problemset/task/1631, /home/raj/cs/dsa/practice/cses/1632.cpp, https://cses.fi/problemset/task/1632, /home/raj/cs/dsa/practice/cses/1633.cpp, https://cses.fi/problemset/task/1633, /home/raj/cs/dsa/practice/cses/1634.cpp, https://cses.fi/problemset/task/1634, /home/raj/cs/dsa/practice/cses/1640.cpp, https://cses.fi/problemset/task/1640, /home/raj/cs/dsa/practice/cses/1641.cpp, https://cses.fi/problemset/task/1641, /home/raj/cs/dsa/practice/cses/1642.cpp, https://cses.fi/problemset/task/1642, /home/raj/cs/dsa/practice/cses/1643.cpp, https://cses.fi/problemset/task/1643, /home/raj/cs/dsa/practice/cses/1644.cpp, https://cses.fi/problemset/task/1644, /home/raj/cs/dsa/practice/cses/1645.cpp, https://cses.fi/problemset/task/1645, /home/raj/cs/dsa/practice/cses/1660.cpp, https://cses.fi/problemset/task/1660, /home/raj/cs/dsa/practice/cses/1661.cpp, https://cses.fi/problemset/task/1661, /home/raj/cs/dsa/practice/cses/1662.cpp, https://cses.fi/problemset/task/1662, /home/raj/cs/dsa/practice/cses/1743.cpp, https://cses.fi/problemset/task/1743, /home/raj/cs/dsa/practice/cses/1755.cpp, https://cses.fi/problemset/task/1755, /home/raj/cs/dsa/practice/cses/2162.cpp, https://cses.fi/problemset/task/2162, /home/raj/cs/dsa/practice/cses/2163.cpp, https://cses.fi/problemset/task/2163, /home/raj/cs/dsa/practice/cses/2165.cpp, https://cses.fi/problemset/task/2165, /home/raj/cs/dsa/practice/cses/2168.cpp, https://cses.fi/problemset/task/2168, /home/raj/cs/dsa/practice/cses/2169.cpp, https://cses.fi/problemset/task/2169, /home/raj/cs/dsa/practice/cses/2183.cpp, https://cses.fi/problemset/task/2183, /home/raj/cs/dsa/practice/cses/2205.cpp, https://cses.fi/problemset/task/2205/, /home/raj/cs/dsa/practice/cses/2216.cpp, https://cses.fi/problemset/task/2216, /home/raj/cs/dsa/practice/cses/2217.cpp, https://cses.fi/problemset/task/2217, /home/raj/cs/dsa/practice/cses/2428.cpp, https://cses.fi/problemset/task/2428, /home/raj/cs/dsa/practice/cses/2431.cpp, https://cses.fi/problemset/task/2431, /home/raj/cs/dsa/practice/cses/3217.cpp, https://cses.fi/problemset/task/3217, /home/raj/cs/dsa/practice/cses/3311.cpp, https://cses.fi/problemset/task/3311, /home/raj/cs/dsa/practice/cses/3399.cpp, https://cses.fi/problemset/task/3399, /home/raj/cs/dsa/practice/cses/3419.cpp, https://cses.fi/problemset/task/3419, /home/raj/cs/dsa/practice/cses/3420.cpp, https://cses.fi/problemset/task/3420, /home/raj/cs/dsa/practice/cses/3421.cpp, https://cses.fi/problemset/task/3421, C:/Users/debra/Desktop/CP/1 to N.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/A, C:/Users/debra/Desktop/CP/3-smooth Numbers.cpp, https://atcoder.jp/contests/abc324/tasks/abc324_b, C:/Users/debra/Desktop/CP/3n + 1 sequence.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/Q, C:/Users/debra/Desktop/CP/8 Neighbors.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/X, C:/Users/debra/Desktop/CP/A to power A.cpp, https://atcoder.jp/contests/abc327/tasks/abc327_b, C:/Users/debra/Desktop/CP/ABBC or BACB 2.cpp, https://codeforces.com/contest/1873/problem/G, C:/Users/debra/Desktop/CP/AND 0 Sum Big.cpp, https://codeforces.com/contest/1514/problem/B, C:/Users/debra/Desktop/CP/AND Sorting.cpp, https://codeforces.com/contest/1682/problem/B, C:/Users/debra/Desktop/CP/Add.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/A, C:/Users/debra/Desktop/CP/Adding Bits.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/F, C:/Users/debra/Desktop/CP/Advantage.cpp, https://codeforces.com/contest/1760/problem/C, C:/Users/debra/Desktop/CP/Age in Days.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/R, C:/Users/debra/Desktop/CP/Ali Baba and Puzzles.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/D, C:/Users/debra/Desktop/CP/Almost Arithmetic Progression.cpp, https://codeforces.com/contest/978/problem/D, C:/Users/debra/Desktop/CP/Almost Prime.cpp, https://codeforces.com/problemset/problem/26/A, C:/Users/debra/Desktop/CP/Anti Sudoku.cpp, https://codeforces.com/contest/1335/problem/D, C:/Users/debra/Desktop/CP/Area of a Circle.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/E, C:/Users/debra/Desktop/CP/Array Average.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/S, C:/Users/debra/Desktop/CP/Array Description.cpp, https://cses.fi/problemset/task/1746, C:/Users/debra/Desktop/CP/Array Elimination.cpp, https://codeforces.com/contest/1601/problem/A, C:/Users/debra/Desktop/CP/Array Recovery.cpp, https://codeforces.com/problemset/problem/1739/B, C:/Users/debra/Desktop/CP/Array with Odd Sum.cpp, https://codeforces.com/contest/1296/problem/A, C:/Users/debra/Desktop/CP/Arrival of the General.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/R, C:/Users/debra/Desktop/CP/Atilla s Favorite Problem.cpp, https://codeforces.com/contest/1760/problem/B, C:/Users/debra/Desktop/CP/Average.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/J, C:/Users/debra/Desktop/CP/Balanced Round.cpp, https://codeforces.com/contest/1850/problem/D, C:/Users/debra/Desktop/CP/Bananas.cpp, https://dmoj.ca/problem/ccc05j5, C:/Users/debra/Desktop/CP/Base Converssion.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/E, C:/Users/debra/Desktop/CP/Basic Data Types.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/B, C:/Users/debra/Desktop/CP/Bear and Big Brother.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/D, C:/Users/debra/Desktop/CP/Bestie.cpp, https://codeforces.com/contest/1732/problem/A, C:/Users/debra/Desktop/CP/Binary String Copying.cpp, https://codeforces.com/problemset/problem/1849/C, C:/Users/debra/Desktop/CP/Binomial Coefficients.cpp, https://cses.fi/problemset/task/1079, C:/Users/debra/Desktop/CP/Blank Space.cpp, https://codeforces.com/contest/1829/problem/B, C:/Users/debra/Desktop/CP/Book Shop.cpp, https://cses.fi/problemset/task/1158, C:/Users/debra/Desktop/CP/Bracket Sequences I math type solution.cpp, https://cses.fi/problemset/task/2064, C:/Users/debra/Desktop/CP/Broken Keyboard.cpp, https://codeforces.com/contest/1765/problem/B, C:/Users/debra/Desktop/CP/Bun Lover.cpp, https://codeforces.com/contest/1822/problem/C, C:/Users/debra/Desktop/CP/Bus Video System.cpp, https://codeforces.com/contest/978/problem/E, C:/Users/debra/Desktop/CP/Buttons.cpp, https://codeforces.com/problemset/problem/1858/A, C:/Users/debra/Desktop/CP/CFR486Div3/A.cpp, https://codeforces.com/contest/988/problem/A, C:/Users/debra/Desktop/CP/CFR486Div3/B.cpp, https://codeforces.com/contest/988/problem/B, C:/Users/debra/Desktop/CP/CFR486Div3/C.cpp, https://codeforces.com/contest/988/problem/C, C:/Users/debra/Desktop/CP/CFR486Div3/D.cpp, https://codeforces.com/contest/988/problem/D, C:/Users/debra/Desktop/CP/CFR486Div3/E.cpp, https://codeforces.com/contest/988/problem/E, C:/Users/debra/Desktop/CP/CFR486Div3/F.cpp, https://codeforces.com/contest/988/problem/F, C:/Users/debra/Desktop/CP/CFR486Div3/Number Place.cpp, https://atcoder.jp/contests/abc327/tasks/abc327_c, C:/Users/debra/Desktop/CP/CFR490Div3/E.cpp, https://codeforces.com/contest/999/problem/E, C:/Users/debra/Desktop/CP/CFR490Div3/F.cpp, https://codeforces.com/contest/999/problem/F, C:/Users/debra/Desktop/CP/CFR494Div3/A.cpp, https://codeforces.com/contest/1003/problem/A, C:/Users/debra/Desktop/CP/CFR494Div3/B.cpp, https://codeforces.com/contest/1003/problem/B, C:/Users/debra/Desktop/CP/CFR494Div3/C.cpp, https://codeforces.com/contest/1003/problem/C, C:/Users/debra/Desktop/CP/CFR494Div3/D.cpp, https://codeforces.com/contest/1003/problem/D, C:/Users/debra/Desktop/CP/CFR494Div3/E.cpp, https://codeforces.com/contest/1003/problem/E, C:/Users/debra/Desktop/CP/CFR494Div3/F.cpp, https://codeforces.com/contest/1003/problem/F, C:/Users/debra/Desktop/CP/CFR496Div3/A.cpp, https://codeforces.com/contest/1005/problem/A, C:/Users/debra/Desktop/CP/CFR496Div3/C.cpp, https://codeforces.com/contest/1005/problem/C, C:/Users/debra/Desktop/CP/CFR496Div3/E1.cpp, https://codeforces.com/contest/1005/problem/E1, C:/Users/debra/Desktop/CP/CFR496Div3/E2.cpp, https://codeforces.com/contest/1005/problem/E2, C:/Users/debra/Desktop/CP/CODE/Anna and the Valentines Day Gift.cpp, https://codeforces.com/contest/1931/problem/E, C:/Users/debra/Desktop/CP/CODE/Anton and Polyhedrons.cpp, https://codeforces.com/problemset/problem/785/A, C:/Users/debra/Desktop/CP/CODE/Array Painting.cpp, https://codeforces.com/problemset/problem/1849/D, C:/Users/debra/Desktop/CP/CODE/Arrival of the General.cpp, https://codeforces.com/problemset/problem/144/A, C:/Users/debra/Desktop/CP/CODE/Bear and Prime 100.cpp, https://codeforces.com/problemset/problem/679/A, C:/Users/debra/Desktop/CP/CODE/Candy Party easy version.cpp, https://codeforces.com/problemset/problem/1868/B1, C:/Users/debra/Desktop/CP/CODE/Divisible Pairs.cpp, https://codeforces.com/contest/1931/problem/D, C:/Users/debra/Desktop/CP/CODE/In Search of an Easy Problem.cpp, https://codeforces.com/problemset/problem/1030/A, C:/Users/debra/Desktop/CP/CODE/Matrix Cascade.cpp, https://codeforces.com/problemset/problem/1864/D, C:/Users/debra/Desktop/CP/CODE/Nearly Lucky Number.cpp, https://codeforces.com/problemset/problem/110/A, C:/Users/debra/Desktop/CP/CODE/Numbers on Whiteboard.cpp, https://codeforces.com/problemset/problem/1921/C, C:/Users/debra/Desktop/CP/CODE/Petr and Book.cpp, https://codeforces.com/contest/139/problem/A, C:/Users/debra/Desktop/CP/CODE/Presents.cpp, https://codeforces.com/problemset/problem/136/A, C:/Users/debra/Desktop/CP/CODE/Running Miles.cpp, https://codeforces.com/problemset/problem/1826/D, C:/Users/debra/Desktop/CP/CODE/Stone Age Problem.cpp, https://codeforces.com/problemset/problem/1679/B, C:/Users/debra/Desktop/CP/CODE/Sum of XOR Functions.cpp, https://codeforces.com/problemset/problem/1879/D, C:/Users/debra/Desktop/CP/CODE/Whiteboard.cpp, https://codeforces.com/problemset/problem/1430/C, C:/Users/debra/Desktop/CP/CONTESTS/CFR501Div3/D.cpp, https://codeforces.com/contest/1015/problem/D, C:/Users/debra/Desktop/CP/CONTESTS/CFR501Div3/F.cpp, https://codeforces.com/contest/1015/problem/F, C:/Users/debra/Desktop/CP/CONTESTS/CFR617Div3/C.cpp, https://codeforces.com/contest/1296/problem/C, C:/Users/debra/Desktop/CP/CONTESTS/CFR617Div3/D.cpp, https://codeforces.com/contest/1296/problem/D, C:/Users/debra/Desktop/CP/CONTESTS/CFR617Div3/E1.cpp, https://codeforces.com/contest/1296/problem/E1, C:/Users/debra/Desktop/CP/CONTESTS/CFR617Div3/E2.cpp, https://codeforces.com/contest/1296/problem/E2, C:/Users/debra/Desktop/CP/CONTESTS/CFR617Div3/F.cpp, https://codeforces.com/contest/1296/problem/F, C:/Users/debra/Desktop/CP/CONTESTS/CFR636Div3/B.cpp, https://codeforces.com/contest/1343/problem/B, C:/Users/debra/Desktop/CP/CONTESTS/CFR636Div3/C.cpp, https://codeforces.com/contest/1343/problem/C, C:/Users/debra/Desktop/CP/CONTESTS/CFR636Div3/D.cpp, https://codeforces.com/contest/1343/problem/D, C:/Users/debra/Desktop/CP/CONTESTS/CFR636Div3/E.cpp, https://codeforces.com/contest/1343/problem/E, C:/Users/debra/Desktop/CP/CONTESTS/CFR644Div3/A.cpp, https://codeforces.com/contest/1360/problem/A, C:/Users/debra/Desktop/CP/CONTESTS/CFR644Div3/B.cpp, https://codeforces.com/contest/1360/problem/B, C:/Users/debra/Desktop/CP/CONTESTS/CFR923Div3/A.cpp, https://codeforces.com/contest/1927/problem/0, C:/Users/debra/Desktop/CP/CONTESTS/CFR923Div3/B.cpp, https://codeforces.com/contest/1927/problem/B, C:/Users/debra/Desktop/CP/CONTESTS/CFR923Div3/C.cpp, https://codeforces.com/contest/1927/problem/C, C:/Users/debra/Desktop/CP/CONTESTS/CFR923Div3/E.cpp, https://codeforces.com/contest/1927/problem/E, C:/Users/debra/Desktop/CP/CONTESTS/CFR923Div3/F.cpp, https://codeforces.com/contest/1927/problem/F, C:/Users/debra/Desktop/CP/CONTESTS/CFR923Div3/G.cpp, https://codeforces.com/contest/1927/problem/G, C:/Users/debra/Desktop/CP/CONTESTS/CFR929Div3/F.cpp, https://codeforces.com/contest/1933/problem/F, C:/Users/debra/Desktop/CP/CONTESTS/CFR929Div3/G.cpp, https://codeforces.com/contest/1933/problem/G, C:/Users/debra/Desktop/CP/CONTESTS/CFR931Div2/A.cpp, https://codeforces.com/contest/1934/problem/A, C:/Users/debra/Desktop/CP/CONTESTS/CFR931Div2/B.cpp, https://codeforces.com/contest/1934/problem/B, C:/Users/debra/Desktop/CP/CONTESTS/new/C.cpp, https://codeforces.com/contest/1360/problem/C, C:/Users/debra/Desktop/CP/CP_Editor/Ahahahahahahahaha.cpp, https://codeforces.com/contest/1407/problem/A, C:/Users/debra/Desktop/CP/CP_Editor/Another Sorting Problem.cpp, https://codeforces.com/contest/1575/problem/A, C:/Users/debra/Desktop/CP/CP_Editor/Array merging.cpp, https://codeforces.com/problemset/problem/1831/B, C:/Users/debra/Desktop/CP/CP_Editor/Binary Cafe.cpp, https://codeforces.com/contest/1840/problem/B, C:/Users/debra/Desktop/CP/CP_Editor/Black and White Stripe.cpp, https://codeforces.com/contest/1690/problem/D, C:/Users/debra/Desktop/CP/CP_Editor/Challenging Valleys.cpp, https://codeforces.com/contest/1760/problem/D, C:/Users/debra/Desktop/CP/CP_Editor/Conveyor Belts.cpp, https://codeforces.com/problemset/problem/1811/B, C:/Users/debra/Desktop/CP/CP_Editor/Counting Orders.cpp, https://codeforces.com/contest/1827/problem/A, C:/Users/debra/Desktop/CP/CP_Editor/Distinct Split.cpp, https://codeforces.com/contest/1791/problem/D, C:/Users/debra/Desktop/CP/CP_Editor/Dungeon.cpp, https://codeforces.com/contest/1463/problem/A, C:/Users/debra/Desktop/CP/CP_Editor/Grid Reconstruction.cpp, https://codeforces.com/problemset/problem/1816/B, C:/Users/debra/Desktop/CP/CP_Editor/LuoTianyi and the Table.cpp, https://codeforces.com/problemset/problem/1825/B, C:/Users/debra/Desktop/CP/CP_Editor/Maximum Control.cpp, https://codeforces.com/problemset/problem/958/B1, C:/Users/debra/Desktop/CP/CP_Editor/Maximum Strength.cpp, https://codeforces.com/problemset/problem/1834/B, C:/Users/debra/Desktop/CP/CP_Editor/Paper Work.cpp, https://codeforces.com/problemset/problem/250/A, C:/Users/debra/Desktop/CP/CP_Editor/Permutation Minimization by Deque.cpp, https://codeforces.com/contest/1579/problem/E1, C:/Users/debra/Desktop/CP/CP_Editor/Sage's Birthday.cpp, https://codeforces.com/contest/1419/problem/D1, C:/Users/debra/Desktop/CP/CP_Editor/Shovels and Swords.cpp, https://codeforces.com/contest/1366/problem/A, C:/Users/debra/Desktop/CP/CP_Editor/Sign Flipping.cpp, https://codeforces.com/contest/1375/problem/A, C:/Users/debra/Desktop/CP/CP_Editor/Simple XML.cpp, https://codeforces.com/problemset/problem/125/B, C:/Users/debra/Desktop/CP/CP_Editor/Tenzing and Books.cpp, https://codeforces.com/contest/1842/problem/B, C:/Users/debra/Desktop/CP/CP_Editor/Up the hill.cpp, https://codeforces.com/problemset/problem/491/A, C:/Users/debra/Desktop/CP/CP_Editor/X-Sum.cpp, https://codeforces.com/contest/1676/problem/D, C:/Users/debra/Desktop/CP/CSES/1192.cpp, https://cses.fi/problemset/task/1192, C:/Users/debra/Desktop/CP/Cake Assembly Line.cpp, https://codeforces.com/contest/1786/problem/B, C:/Users/debra/Desktop/CP/Cakeminator.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/N, C:/Users/debra/Desktop/CP/Calculator.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/O, C:/Users/debra/Desktop/CP/Candies.cpp, https://codeforces.com/contest/1810/problem/B, C:/Users/debra/Desktop/CP/Capital or Small or Digit.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/M, C:/Users/debra/Desktop/CP/Cardboard for Pictures.cpp, https://codeforces.com/contest/1850/problem/E, C:/Users/debra/Desktop/CP/Cezar.cpp, https://dmoj.ca/problem/coci17c1p1, C:/Users/debra/Desktop/CP/Char.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/N, C:/Users/debra/Desktop/CP/Chips on the Board.cpp, https://codeforces.com/problemset/problem/1879/B, C:/Users/debra/Desktop/CP/Chloe and the sequence.cpp, https://codeforces.com/contest/743/problem/B, C:/Users/debra/Desktop/CP/Christmas Party.cpp, https://cses.fi/problemset/task/1717, C:/Users/debra/Desktop/CP/Circle Game.cpp, https://codeforces.com/problemset/problem/1695/B, C:/Users/debra/Desktop/CP/Circle Task.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/T, C:/Users/debra/Desktop/CP/Circles.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/W, C:/Users/debra/Desktop/CP/Code/Yet Another Permutation Problem.cpp, https://codeforces.com/contest/1858/problem/C, C:/Users/debra/Desktop/CP/Coin Combinations I.cpp, https://cses.fi/problemset/task/1635, C:/Users/debra/Desktop/CP/Coin Combinations II.cpp, https://cses.fi/problemset/task/1636, C:/Users/debra/Desktop/CP/Colorful Stones simplified Edition.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/I, C:/Users/debra/Desktop/CP/Combination.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/T, C:/Users/debra/Desktop/CP/Common Area.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/Y, C:/Users/debra/Desktop/CP/Comparison.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/X, C:/Users/debra/Desktop/CP/Contest Start.cpp, https://codeforces.com/problemset/problem/1539/A, C:/Users/debra/Desktop/CP/Convert To Decimal 2.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/X, C:/Users/debra/Desktop/CP/Coordinates of a Point.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/Q, C:/Users/debra/Desktop/CP/Copil Copac Draws Trees.cpp, https://codeforces.com/contest/1830/problem/A, C:/Users/debra/Desktop/CP/Corners.cpp, https://codeforces.com/problemset/problem/1720/C, C:/Users/debra/Desktop/CP/Count Letters.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/J, C:/Users/debra/Desktop/CP/Count Subarrays.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/Q, C:/Users/debra/Desktop/CP/Count Vowels.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/I, C:/Users/debra/Desktop/CP/Count Words.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/P, C:/Users/debra/Desktop/CP/Counting Divisors.cpp, https://cses.fi/problemset/task/1713, C:/Users/debra/Desktop/CP/Covered Path.cpp, https://codeforces.com/gym/302977/problem/G, C:/Users/debra/Desktop/CP/Creating Expression1.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/V, C:/Users/debra/Desktop/CP/Cypher.cpp, https://codeforces.com/contest/1703/problem/C, C:/Users/debra/Desktop/CP/Data Type Guessing.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/H, C:/Users/debra/Desktop/CP/Deadly Laser alternative observation method.cpp, https://codeforces.com/problemset/problem/1721/B, C:/Users/debra/Desktop/CP/Decoding.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/Z, C:/Users/debra/Desktop/CP/Diamond Miner.cpp, https://codeforces.com/contest/1495/problem/A, C:/Users/debra/Desktop/CP/Difference of GCDs.cpp, https://codeforces.com/problemset/problem/1708/B, C:/Users/debra/Desktop/CP/Difference.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/D, C:/Users/debra/Desktop/CP/Different Differences.cpp, https://codeforces.com/contest/1772/problem/C, C:/Users/debra/Desktop/CP/Digits Summation.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/F, C:/Users/debra/Desktop/CP/Digits.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/Q, C:/Users/debra/Desktop/CP/Distance points.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/R, C:/Users/debra/Desktop/CP/Distinct Numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/M, C:/Users/debra/Desktop/CP/Distinct Values Queries.cpp, https://cses.fi/problemset/task/1734, C:/Users/debra/Desktop/CP/Distributing Apples.cpp, https://cses.fi/problemset/task/1716, C:/Users/debra/Desktop/CP/Divisability.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/I, C:/Users/debra/Desktop/CP/Divisors.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/K, C:/Users/debra/Desktop/CP/Double Sort.cpp, https://codeforces.com/contest/1681/problem/C, C:/Users/debra/Desktop/CP/Dragons.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/C, C:/Users/debra/Desktop/CP/Drawing 'X'.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326907/problem/B, C:/Users/debra/Desktop/CP/Easy Fibonacci.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/Y, C:/Users/debra/Desktop/CP/Encrypt & Decrypt Message.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/W, C:/Users/debra/Desktop/CP/Equalize by Divide.cpp, https://codeforces.com/contest/1799/problem/B, C:/Users/debra/Desktop/CP/Equation.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/F, C:/Users/debra/Desktop/CP/Even Numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/B, C:/Users/debra/Desktop/CP/Factorial.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/J, C:/Users/debra/Desktop/CP/Ferris Wheel.cpp, https://cses.fi/problemset/task/1090/, C:/Users/debra/Desktop/CP/Fibonacci.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/O, C:/Users/debra/Desktop/CP/File Name.cpp, https://codeforces.com/contest/978/problem/B, C:/Users/debra/Desktop/CP/Filling Shapes.cpp, https://codeforces.com/gym/302977/problem/A, C:/Users/debra/Desktop/CP/Find and Replace.cpp, https://codeforces.com/contest/1807/problem/C, C:/Users/debra/Desktop/CP/First digit.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/P, C:/Users/debra/Desktop/CP/Fitness and the Luxury Number.cpp, https://codeforces.com/contest/1737/problem/B, C:/Users/debra/Desktop/CP/Five in One.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/O, C:/Users/debra/Desktop/CP/Fixed Password.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/D, C:/Users/debra/Desktop/CP/Float or int.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/U, C:/Users/debra/Desktop/CP/Following Directions.cpp, https://codeforces.com/contest/1791/problem/B, C:/Users/debra/Desktop/CP/Forest Queries.cpp, https://cses.fi/problemset/task/1652, C:/Users/debra/Desktop/CP/Forever Winter.cpp, https://codeforces.com/contest/1829/problem/F, C:/Users/debra/Desktop/CP/Fox And Snake.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/F, C:/Users/debra/Desktop/CP/Free Ice Cream.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/O, C:/Users/debra/Desktop/CP/Frequency Array.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/V, C:/Users/debra/Desktop/CP/GCD.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/H, C:/Users/debra/Desktop/CP/Gardener and the Array.cpp, https://codeforces.com/contest/1775/problem/B, C:/Users/debra/Desktop/CP/Geometry Test.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/Z, C:/Users/debra/Desktop/CP/George and Accommodation.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/E, C:/Users/debra/Desktop/CP/Good Kid.cpp, https://codeforces.com/problemset/problem/1873/B, C:/Users/debra/Desktop/CP/Good Number.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/S, C:/Users/debra/Desktop/CP/Good Subarrays.cpp, https://codeforces.com/contest/1736/problem/C1, C:/Users/debra/Desktop/CP/Good Tuple Problem.cpp, https://atcoder.jp/contests/abc327/tasks/abc327_d, C:/Users/debra/Desktop/CP/Good or Bad.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/H, C:/Users/debra/Desktop/CP/Grab the Candies.cpp, https://codeforces.com/contest/1807/problem/B, C:/Users/debra/Desktop/CP/Hard Compare.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/Z, C:/Users/debra/Desktop/CP/Helpful Maths.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/T, C:/Users/debra/Desktop/CP/Hemose Shopping.cpp, https://codeforces.com/contest/1592/problem/B, C:/Users/debra/Desktop/CP/Hotel Queries.cpp, https://cses.fi/problemset/task/1143, C:/Users/debra/Desktop/CP/I Love strings.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/K, C:/Users/debra/Desktop/CP/ICPC_practice_Hard/H.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223340/problem/H, C:/Users/debra/Desktop/CP/ICPC_practice_Hard/I.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223340/problem/I, C:/Users/debra/Desktop/CP/ICPC_practice_Hard/J.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223340/problem/J, C:/Users/debra/Desktop/CP/ICPC_practice_Hard/K.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223340/problem/K, C:/Users/debra/Desktop/CP/ICPC_practice_Hard/L.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223340/problem/L, C:/Users/debra/Desktop/CP/ICPC_practice_medium/A.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/A, C:/Users/debra/Desktop/CP/ICPC_practice_medium/B.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/B, C:/Users/debra/Desktop/CP/ICPC_practice_medium/J.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/J, C:/Users/debra/Desktop/CP/ICPC_practice_medium/K.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/K, C:/Users/debra/Desktop/CP/ICPC_practice_medium/L.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/L, C:/Users/debra/Desktop/CP/ICPC_practice_medium/M.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/M, C:/Users/debra/Desktop/CP/ICPC_practice_medium/N.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/N, C:/Users/debra/Desktop/CP/ICPC_practice_medium/O.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/O, C:/Users/debra/Desktop/CP/ICPC_practice_medium/P.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/P, C:/Users/debra/Desktop/CP/ICPC_practice_medium/Q.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/Q, C:/Users/debra/Desktop/CP/ICPC_practice_medium/R.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/R, C:/Users/debra/Desktop/CP/ICPC_practice_medium/S.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/S, C:/Users/debra/Desktop/CP/ICPC_practice_medium/T.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/T, C:/Users/debra/Desktop/CP/ICPC_practice_medium/U.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/U, C:/Users/debra/Desktop/CP/ICPC_practice_medium/V.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/V, C:/Users/debra/Desktop/CP/ICPC_practice_medium/W.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/W, C:/Users/debra/Desktop/CP/ICPC_practice_medium/X.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/X, C:/Users/debra/Desktop/CP/ICPC_practice_medium/Y.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/Y, C:/Users/debra/Desktop/CP/ICPC_practice_medium/Z.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/Z, C:/Users/debra/Desktop/CP/Increasing Array Queries.cpp, https://cses.fi/problemset/task/2416, C:/Users/debra/Desktop/CP/Interval Sweep.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/E, C:/Users/debra/Desktop/CP/Interval.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/S, C:/Users/debra/Desktop/CP/Interview.cpp, https://codeforces.com/contest/1807/problem/E, C:/Users/debra/Desktop/CP/Inverted Pyramid.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/H, C:/Users/debra/Desktop/CP/Iroha and a Grid.cpp, https://atcoder.jp/contests/abc042/tasks/arc058_b, C:/Users/debra/Desktop/CP/Is B a subsequence of A.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/U, C:/Users/debra/Desktop/CP/Is Triangle.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/S, C:/Users/debra/Desktop/CP/Is it rated.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/V, C:/Users/debra/Desktop/CP/Johnny and His Hobbies.cpp, https://codeforces.com/contest/1362/problem/B, C:/Users/debra/Desktop/CP/Karina and Array.cpp, https://codeforces.com/contest/1822/problem/B, C:/Users/debra/Desktop/CP/Katryoshka.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/G, C:/Users/debra/Desktop/CP/Knapsack recursive.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/U, C:/Users/debra/Desktop/CP/Koko And The Transformation.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/C, C:/Users/debra/Desktop/CP/Koxia and Whiteboards.cpp, https://codeforces.com/contest/1770/problem/A, C:/Users/debra/Desktop/CP/Launch of Collider.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223207/problem/H, C:/Users/debra/Desktop/CP/Left Max.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/Z, C:/Users/debra/Desktop/CP/Less or Equal.cpp, https://codeforces.com/contest/977/problem/C, C:/Users/debra/Desktop/CP/Letters.cpp, https://codeforces.com/contest/978/problem/C, C:/Users/debra/Desktop/CP/List Removals.cpp, https://cses.fi/problemset/task/1749, C:/Users/debra/Desktop/CP/Log2.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/P, C:/Users/debra/Desktop/CP/Long Long.cpp, https://codeforces.com/contest/1843/problem/B, C:/Users/debra/Desktop/CP/Longest Divisors Interval.cpp, https://codeforces.com/problemset/problem/1855/B, C:/Users/debra/Desktop/CP/Lucky Division.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/J, C:/Users/debra/Desktop/CP/Lucky Numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/M, C:/Users/debra/Desktop/CP/LuoTianyi and the Show.cpp, https://codeforces.com/contest/1824/problem/A, C:/Users/debra/Desktop/CP/Mad City.cpp, https://codeforces.com/contest/1873/problem/H, C:/Users/debra/Desktop/CP/Magnets.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/G, C:/Users/debra/Desktop/CP/Mahmoud and Longest Uncommon Subsequence.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/W, C:/Users/debra/Desktop/CP/Mainak and Interesting Sequence.cpp, https://codeforces.com/contest/1726/problem/B, C:/Users/debra/Desktop/CP/Make Array Good.cpp, https://codeforces.com/problemset/problem/1762/B, C:/Users/debra/Desktop/CP/Masha and a Beautiful Tree.cpp, https://codeforces.com/contest/1741/problem/D, C:/Users/debra/Desktop/CP/Mathematical Expression.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/W, C:/Users/debra/Desktop/CP/Matrix.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/T, C:/Users/debra/Desktop/CP/Max Number.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/K, C:/Users/debra/Desktop/CP/Max Split.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/S, C:/Users/debra/Desktop/CP/Max Subsequence.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/N, C:/Users/debra/Desktop/CP/Max and MIN.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/G, C:/Users/debra/Desktop/CP/Max and Min.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/K, C:/Users/debra/Desktop/CP/Max.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/E, C:/Users/debra/Desktop/CP/Maximum Cost Deletion.cpp, https://codeforces.com/problemset/problem/1550/B, C:/Users/debra/Desktop/CP/Maximum Distinct Numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/E, C:/Users/debra/Desktop/CP/Medium Number.cpp, https://codeforces.com/contest/1760/problem/A, C:/Users/debra/Desktop/CP/Memo and Momo.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/B, C:/Users/debra/Desktop/CP/Mentors.cpp, https://codeforces.com/contest/978/problem/F, C:/Users/debra/Desktop/CP/Meximum Array.cpp, https://codeforces.com/contest/1628/problem/A, C:/Users/debra/Desktop/CP/Mike and Fun.cpp, https://codeforces.com/gym/302977/problem/I, C:/Users/debra/Desktop/CP/Min Cost String.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/Y, C:/Users/debra/Desktop/CP/Minimum Varied Number.cpp, https://codeforces.com/contest/1714/problem/C, C:/Users/debra/Desktop/CP/Minor Reduction unsolved.cpp, https://codeforces.com/problemset/problem/1626/B, C:/Users/debra/Desktop/CP/Mirror Array.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/W, C:/Users/debra/Desktop/CP/Monsters.cpp, https://codeforces.com/problemset/problem/1849/B, C:/Users/debra/Desktop/CP/Most Similar Words.cpp, https://codeforces.com/contest/1676/problem/C, C:/Users/debra/Desktop/CP/Multiples.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/J, C:/Users/debra/Desktop/CP/Multiplication of Matrices.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/F, C:/Users/debra/Desktop/CP/Multiplication table.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/F, C:/Users/debra/Desktop/CP/N Times.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/H, C:/Users/debra/Desktop/CP/New Array.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/L, C:/Users/debra/Desktop/CP/New Words.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/U, C:/Users/debra/Desktop/CP/Next Alphabet.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/C, C:/Users/debra/Desktop/CP/Night at the Museum.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/Q, C:/Users/debra/Desktop/CP/Non-coprime Split.cpp, https://codeforces.com/problemset/problem/1872/C, C:/Users/debra/Desktop/CP/Number of Ways.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/Y, C:/Users/debra/Desktop/CP/Numbers Histogram.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/N, C:/Users/debra/Desktop/CP/Odd Selection.cpp, https://codeforces.com/contest/1363/problem/A, C:/Users/debra/Desktop/CP/Odd Swap Sort.cpp, https://codeforces.com/problemset/problem/1638/B, C:/Users/debra/Desktop/CP/One Prime.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/H, C:/Users/debra/Desktop/CP/Palindrome Array.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/R, C:/Users/debra/Desktop/CP/Palindrome.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/I, C:/Users/debra/Desktop/CP/Palindromes Replace.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/A, C:/Users/debra/Desktop/CP/Panoramixs Prediction.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/X, C:/Users/debra/Desktop/CP/Penalty.cpp, https://codeforces.com/contest/1553/problem/C, C:/Users/debra/Desktop/CP/Permutation with arrays.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/R, C:/Users/debra/Desktop/CP/Petr and a Combination Lock.cpp, https://codeforces.com/contest/1097/problem/B, C:/Users/debra/Desktop/CP/Pizzeria Queries.cpp, https://cses.fi/problemset/task/2206, C:/Users/debra/Desktop/CP/Playing in a Casino.cpp, https://codeforces.com/contest/1808/problem/B, C:/Users/debra/Desktop/CP/Playing with GCD.cpp, https://codeforces.com/contest/1736/problem/B, C:/Users/debra/Desktop/CP/Playoff.cpp, https://codeforces.com/problemset/problem/1767/D, C:/Users/debra/Desktop/CP/Police Recruits.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/P, C:/Users/debra/Desktop/CP/Polycarp and Sums of Subsequences.cpp, https://codeforces.com/contest/1618/problem/A, C:/Users/debra/Desktop/CP/Positive and Negative.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/C, C:/Users/debra/Desktop/CP/Power Of Two.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/A, C:/Users/debra/Desktop/CP/Prefix Sum Addicts.cpp, https://codeforces.com/contest/1738/problem/B, C:/Users/debra/Desktop/CP/Prefix Sum Queries.cpp, https://cses.fi/problemset/task/2166, C:/Users/debra/Desktop/CP/Prepend and Append.cpp, https://codeforces.com/contest/1791/problem/C, C:/Users/debra/Desktop/CP/Presents.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/H, C:/Users/debra/Desktop/CP/Prime Factors.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/J, C:/Users/debra/Desktop/CP/Prime Fibonacci.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/K, C:/Users/debra/Desktop/CP/Prime Function.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/D, C:/Users/debra/Desktop/CP/Prime Multiples.cpp, https://cses.fi/problemset/task/2185, C:/Users/debra/Desktop/CP/Prime checking.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/B, C:/Users/debra/Desktop/CP/Primes from 1 to n.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/J, C:/Users/debra/Desktop/CP/Print Digits using Recursion.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/D, C:/Users/debra/Desktop/CP/Print Even Indices.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/F, C:/Users/debra/Desktop/CP/Print Recursion.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/A, C:/Users/debra/Desktop/CP/Print from 1 to N.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/B, C:/Users/debra/Desktop/CP/Print from N to 1.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/C, C:/Users/debra/Desktop/CP/Print.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/B, C:/Users/debra/Desktop/CP/Product.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/Q, C:/Users/debra/Desktop/CP/Pyramid.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/G, C:/Users/debra/Desktop/CP/Quests.cpp, https://codeforces.com/contest/1760/problem/F, C:/Users/debra/Desktop/CP/Raising Bacteria.cpp, https://codeforces.com/contest/579/problem/A, C:/Users/debra/Desktop/CP/Range Update Queries.cpp, https://cses.fi/problemset/task/1651, C:/Users/debra/Desktop/CP/Reach Value.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/W, C:/Users/debra/Desktop/CP/Rectangle.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/X, C:/Users/debra/Desktop/CP/Remove Duplicates.cpp, https://codeforces.com/contest/978/problem/A, C:/Users/debra/Desktop/CP/Removing Digits.cpp, https://cses.fi/problemset/task/1637, C:/Users/debra/Desktop/CP/Replace Word.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/V, C:/Users/debra/Desktop/CP/Restoring the Duration of Tasks.cpp, https://codeforces.com/contest/1690/problem/C, C:/Users/debra/Desktop/CP/Reverse Words.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/Q, C:/Users/debra/Desktop/CP/Rock and Lever.cpp, https://codeforces.com/contest/1420/problem/B, C:/Users/debra/Desktop/CP/Rudolf and Snowflakes.cpp, https://codeforces.com/problemset/problem/1846/E2, C:/Users/debra/Desktop/CP/Salary Queries.cpp, https://cses.fi/problemset/task/1144, C:/Users/debra/Desktop/CP/Same.cpp, https://atcoder.jp/contests/abc324/tasks/abc324_a, C:/Users/debra/Desktop/CP/Say Hello.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/A, C:/Users/debra/Desktop/CP/Scoring Subsequences.cpp, https://codeforces.com/contest/1794/problem/C, C:/Users/debra/Desktop/CP/Search In Matrix.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219774/problem/S, C:/Users/debra/Desktop/CP/Sequence of Numbers and Sum.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/R, C:/Users/debra/Desktop/CP/Sequence with Digits.cpp, https://codeforces.com/contest/1355/problem/A, C:/Users/debra/Desktop/CP/Sereja and Dima.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/L, C:/Users/debra/Desktop/CP/Settlement of Guinea Pigs.cpp, https://codeforces.com/problemset/problem/1802/B, C:/Users/debra/Desktop/CP/Shape1.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/P, C:/Users/debra/Desktop/CP/Shift Right.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/K, C:/Users/debra/Desktop/CP/Shift Zeros.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/N, C:/Users/debra/Desktop/CP/Shoe Shuffling.cpp, https://codeforces.com/problemset/problem/1691/B, C:/Users/debra/Desktop/CP/Short Sort.cpp, https://codeforces.com/problemset/problem/1873/A, C:/Users/debra/Desktop/CP/Simple Calculator.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/C, C:/Users/debra/Desktop/CP/Sort Numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/T, C:/Users/debra/Desktop/CP/Sort String.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/O, C:/Users/debra/Desktop/CP/Sort Zero.cpp, https://codeforces.com/problemset/problem/1712/C, C:/Users/debra/Desktop/CP/Special Numbers.cpp, https://codeforces.com/contest/1594/problem/B, C:/Users/debra/Desktop/CP/Split Sort.cpp, https://codeforces.com/problemset/problem/1863/B, C:/Users/debra/Desktop/CP/Stand up Comedian.cpp, https://codeforces.com/contest/1792/problem/B, C:/Users/debra/Desktop/CP/Static Range Sum Queries.cpp, https://cses.fi/problemset/task/1646, C:/Users/debra/Desktop/CP/Straight Line.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/U, C:/Users/debra/Desktop/CP/String Functions.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/L, C:/Users/debra/Desktop/CP/String Score.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/R, C:/Users/debra/Desktop/CP/Strongly Composite.cpp, https://codeforces.com/contest/1823/problem/C, C:/Users/debra/Desktop/CP/Subsequence String.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/M, C:/Users/debra/Desktop/CP/Suffix Sum.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/M, C:/Users/debra/Desktop/CP/Sum of Consecutive Odd Numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/S, C:/Users/debra/Desktop/CP/Sum of Divisors.cpp, https://cses.fi/problemset/task/1082, C:/Users/debra/Desktop/CP/Sum of Range.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/C, C:/Users/debra/Desktop/CP/Sum of Two Numbers.cpp, https://codeforces.com/problemset/problem/1788/B, C:/Users/debra/Desktop/CP/Sum of a Matrix.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/N, C:/Users/debra/Desktop/CP/Summation from 1 to N.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/G, C:/Users/debra/Desktop/CP/Summation of its divisors.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/G, C:/Users/debra/Desktop/CP/Summation.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/L, C:/Users/debra/Desktop/CP/Swap.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/E, C:/Users/debra/Desktop/CP/Swapping With Matrix.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/I, C:/Users/debra/Desktop/CP/Taisia and Dice.cpp, https://codeforces.com/contest/1790/problem/B, C:/Users/debra/Desktop/CP/Tales of a Sort.cpp, https://codeforces.com/problemset/problem/1856/A, C:/Users/debra/Desktop/CP/Team Olympiad.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/Y, C:/Users/debra/Desktop/CP/Template/B Fibonaccharsis.cpp, https://codeforces.com/problemset/problem/1853/B, C:/Users/debra/Desktop/CP/Ten Words of Wisdom.cpp, https://codeforces.com/contest/1850/problem/B, C:/Users/debra/Desktop/CP/Tenzing and Balls.cpp, https://codeforces.com/contest/1842/problem/C, C:/Users/debra/Desktop/CP/The Brothers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/L, C:/Users/debra/Desktop/CP/The Cactus Number.cpp, https://dmoj.ca/problem/valentines18j1, C:/Users/debra/Desktop/CP/The Forbidden Permutation.cpp, https://codeforces.com/contest/1778/problem/B, C:/Users/debra/Desktop/CP/The Morning Star.cpp, https://codeforces.com/contest/1850/problem/G, C:/Users/debra/Desktop/CP/The New Year  Meeting Friends.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/M, C:/Users/debra/Desktop/CP/The String Has a Target.cpp, https://codeforces.com/contest/1805/problem/B, C:/Users/debra/Desktop/CP/The Third Letter.cpp, https://codeforces.com/contest/1850/problem/H, C:/Users/debra/Desktop/CP/The last 2 digits.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/Y, C:/Users/debra/Desktop/CP/The maximum path-sum.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223339/problem/X, C:/Users/debra/Desktop/CP/Three Numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219432/problem/Z, C:/Users/debra/Desktop/CP/Three Sevens.cpp, https://codeforces.com/problemset/problem/1798/B, C:/Users/debra/Desktop/CP/Three displays.cpp, https://codeforces.com/gym/302977/problem/H, C:/Users/debra/Desktop/CP/Timon and Pumbaa.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326907/problem/A, C:/Users/debra/Desktop/CP/To My Critics.cpp, https://codeforces.com/contest/1850/problem/A, C:/Users/debra/Desktop/CP/Two Binary Strings.cpp, https://codeforces.com/contest/1861/problem/B, C:/Users/debra/Desktop/CP/Two Lines.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/V, C:/Users/debra/Desktop/CP/Two Teams Composing.cpp, https://codeforces.com/contest/1335/problem/C, C:/Users/debra/Desktop/CP/Two intervals.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/X, C:/Users/debra/Desktop/CP/Two numbers.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/H, C:/Users/debra/Desktop/CP/URL.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219856/problem/T, C:/Users/debra/Desktop/CP/Update Files.cpp, https://codeforces.com/problemset/problem/1606/B, C:/Users/debra/Desktop/CP/Vanya and Lanterns.cpp, https://codeforces.com/problemset/problem/492/B, C:/Users/debra/Desktop/CP/Vitamins.cpp, https://codeforces.com/contest/1042/problem/B, C:/Users/debra/Desktop/CP/Vlad Building Beautiful Array.cpp, https://codeforces.com/contest/1833/problem/C, C:/Users/debra/Desktop/CP/Watermelon.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223206/problem/B, C:/Users/debra/Desktop/CP/We Need the Zero.cpp, https://codeforces.com/contest/1805/problem/A, C:/Users/debra/Desktop/CP/We Were Both Children.cpp, https://codeforces.com/contest/1850/problem/F, C:/Users/debra/Desktop/CP/Web of Lies.cpp, https://codeforces.com/contest/1548/problem/A, C:/Users/debra/Desktop/CP/Weird Sum.cpp, https://codeforces.com/contest/1648/problem/A, C:/Users/debra/Desktop/CP/Welcome for you with Conditions.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/219158/problem/I, C:/Users/debra/Desktop/CP/Winter Sale.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/326175/problem/A, C:/Users/debra/Desktop/CP/Wonderful Number.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223205/problem/C, C:/Users/debra/Desktop/CP/Word Game.cpp, https://codeforces.com/contest/1722/problem/C, C:/Users/debra/Desktop/CP/Word Scrambler.cpp, https://dmoj.ca/problem/ics4p1, C:/Users/debra/Desktop/CP/Word on the Paper.cpp, https://codeforces.com/contest/1850/problem/C, C:/Users/debra/Desktop/CP/Wrong Subtraction.cpp, https://codeforces.com/contest/977/problem/A, C:/Users/debra/Desktop/CP/XOR Palindromes.cpp, https://codeforces.com/problemset/problem/1867/B, C:/Users/debra/Desktop/CP/Xor.cpp, https://codeforces.com/group/MWSDmqGsZm/contest/223338/problem/D, C:/Users/debra/Desktop/CP/Yet Another Broken Keyboard.cpp, https://codeforces.com/gym/302977/problem/B, C:/Users/debra/Desktop/CP/Zero and Invert.cpp, https://codeforces.com/contest/1839/problem/C, C:/Users/debra/Desktop/CP/ab.cpp, https://atcoder.jp/contests/abc327/tasks/abc327_a, C:/Users/debra/Desktop/CP/arc156_a.cpp, https://atcoder.jp/contests/arc156/tasks/arc156_a, C:/Users/debra/Desktop/CP/arc157_a.cpp, https://atcoder.jp/contests/arc157/tasks/arc157_a, C:/Users/debra/Desktop/CP/arc158_a.cpp, https://atcoder.jp/contests/arc158/tasks/arc158_a, C:/Users/debra/Desktop/CP/dmopc15c6p3.cpp, https://dmoj.ca/problem/dmopc15c6p3, C:/Users/debra/Desktop/CP/dynamic_tree_vertex_set_path_composite.cpp, https://judge.yosupo.jp/problem/dynamic_tree_vertex_set_path_composite, C:/Users/debra/Desktop/DSA/PRACTICE/A.cpp, https://codeforces.com/contest/1989/problem/0, C:/Users/debra/Desktop/DSA/PRACTICE/Boris and His Amazing Haircut.cpp, https://codeforces.com/problemset/problem/1779/D, C:/Users/debra/Desktop/DSA/PRACTICE/Chaya Calendar.cpp, https://codeforces.com/contest/1932/problem/B, C:/Users/debra/Desktop/DSA/PRACTICE/Computing Machine.cpp, https://codeforces.com/contest/1978/problem/E, C:/Users/debra/Desktop/DSA/PRACTICE/Feed Cats.cpp, https://codeforces.com/contest/1932/problem/F, C:/Users/debra/Desktop/DSA/PRACTICE/Final Countdown.cpp, https://codeforces.com/contest/1932/problem/E, C:/Users/debra/Desktop/DSA/PRACTICE/LR-remainders.cpp, https://codeforces.com/contest/1932/problem/C, C:/Users/debra/Desktop/DSA/PRACTICE/Smithing Skill.cpp, https://codeforces.com/contest/1989/problem/D, C:/Users/debra/Desktop/DSA/PRACTICE/Substring and Subsequence.cpp, https://codeforces.com/contest/1989/problem/B, C:/Users/debra/Desktop/DSA/PRACTICE/Thorns and Coins.cpp, https://codeforces.com/contest/1932/problem/A, C:/Users/debra/Desktop/DSA/PRACTICE/Two Movies.cpp, https://codeforces.com/contest/1989/problem/C, C:/Users/debra/Desktop/DSA/PRACTICE/Yet Another Tournament.cpp, https://codeforces.com/problemset/problem/1783/C
first_time_user=false
force_close=false
format_on_auto_save=false
format_on_manual_save=true
full_screen_dialog_shown=true
geometry=@Rect(0 0 0 0)
hide_stopwatch_result=false
html_diff_viewer_length_limit=50000
input_file_save_path=./${basename}_${1-index}.in
locale=system
maximized_window=true
message_length_limit=50000
message_logger_font=@Variant(\0\0\0@\0\0\0$\0\x46\0i\0r\0\x61\0 \0\x43\0o\0\x64\0\x65\0 \0S\0\x65\0m\0i\0\x42\0o\0l\0\x64@(\0\0\0\0\0\0\xff\xff\xff\xff\x5\x1\0?\x10)
number_of_problems_in_contest=5
opacity=91
open_file_length_limit=20000
open_old_file_for_old_problem_url=false
output_display_length_limit=50000
output_length_limit=50000
promotion_dialog_shown=true
recent_files=/home/raj/cs/dsa/practice/atcoder_dp/dp_i.cpp, /home/raj/cs/dsa/practice/atcoder_dp/dp_h.cpp, /home/raj/cs/dsa/practice/atcoder_dp/dp_g.cpp, /home/raj/cs/dsa/practice/atcoder_dp/dp_f.cpp, /home/raj/cs/dsa/practice/atcoder_dp/dp_e.cpp, /home/raj/cs/dsa/practice/cf/2128/F.cpp, /home/raj/cs/dsa/practice/cf/2128/Untitled-4.cpp, /home/raj/cs/dsa/practice/cf/2128/Untitled-3.cpp, /home/raj/cs/dsa/practice/cf/2128/E2.cpp, /home/raj/cs/dsa/practice/cf/2128/Untitled-2.cpp, /home/raj/cs/dsa/practice/cf/2128/Untitled-1.cpp, /home/raj/cs/dsa/practice/cf/2128/E1.cpp, /home/raj/cs/dsa/practice/cf/2128/D.cpp, /home/raj/cs/dsa/practice/cf/2128/C.cpp, /home/raj/cs/dsa/practice/cf/2128/B.cpp, /home/raj/cs/dsa/practice/cf/2128/A.cpp, /home/raj/cs/dsa/practice/cf/G.cpp, /home/raj/cs/dsa/practice/cf/Untitled-3.cpp, /home/raj/cs/dsa/practice/cf/Untitled-5.cpp, /home/raj/cs/dsa/practice/cf/Untitled-4.cpp
replace_tabs=true
restore_old_problem_url=false
right_splitter_size=@ByteArray(\0\0\0\xff\0\0\0\x1\0\0\0\x2\0\0\x1\xd2\0\0\x1\xdc\x1\xff\xff\xff\xff\x1\0\0\0\x2\0)
run_on_empty_testcase=true
save_faster=false
save_file_on_compilation=true
save_file_on_execution=false
save_tests=false
show_compile_and_run_only=true
show_only_monospaced_font=false
splitter_size=@ByteArray(\0\0\0\xff\0\0\0\x1\0\0\0\x2\0\0\x4\xe1\0\0\x2s\x1\xff\xff\xff\xff\x1\0\0\0\x1\0)
tab_jump_out_parentheses=false
tab_width=4
test_case_maximum_height=1000
test_cases_font=@Variant(\0\0\0@\0\0\0$\0\x46\0i\0r\0\x61\0 \0\x43\0o\0\x64\0\x65\0 \0S\0\x65\0m\0i\0\x42\0o\0l\0\x64@(\0\0\0\0\0\0\xff\xff\xff\xff\x5\x1\0?\x10)
testcases_matching_rules=@Variant(\0\0\0\v\0\0\0\x2\0\0\0\x10\0(\0.\0*\0)\0\\\0.\0i\0n\0\0\0\f\0\\\0\x31\0.\0\x61\0n\0s), @Variant(\0\0\0\v\0\0\0\x2\0\0\0\x10\0(\0.\0*\0)\0\\\0.\0i\0n\0\0\0\f\0\\\0\x31\0.\0o\0u\0t)
toggle_stopwatch_on_tab_switch=false
total_usage_time=2295849
ui_style=Dark Fusion
use_custom_application_font=false
view_mode=split
wrap_text=true

[Language%20Config]
C%2B%2B\snippet\01bfs="void distance(int u)\n{\n    vis.assign(n, inf);\n    vis[u] = 0;\n\n    deque<int> q;\n    q.push_back(u);\n    while (q.size())\n    {\n        u = q.front();\n        q.pop_front();\n\n        for (auto &v : gr[u])\n        {\n            if (vis[v.ff] > vis[u] + v.ss)\n            {\n                vis[v.ff] = vis[u] + v.ss;\n\n                if (v.ss)\n                    q.push_back(v.ff);\n                else\n                    q.push_front(v.ff);\n            }\n        }\n    }\n\n    return;\n}\n\n/*\n// Zero one Graph\nint n, m;\nV<V<pii>> gr;\nvi vis;\n\nvoid solve()\n{\n    cin >> n >> m;\n    gr.resize(n, V<pii>(0));\n    int u, v, w;\n\n    f(i, 0, m)\n    {\n        cin >> u >> v >> w;\n        u--, v--;\n        gr[u].pb({v, w});\n        gr[v].pb({u, w});\n    }\n\n    distance(0);\n\n    f(i, 0, n)\n    {\n        cout << eif((vis[i] == inf), -1, vis[i]) << sp;\n    }\n    cout << el;\n\n    return;\n}\n\n\n*/"
C%2B%2B\snippet\DSU="struct DSU\n{\n   int n, num_grp;\n   int *par, *sz;\n\n   DSU()\n   {\n      n = 0;\n      num_grp = 0;\n      par = NULL;\n      sz = NULL;\n   }\n\n   DSU(int n)\n   {\n      this->n = n;\n      num_grp = n;\n      par = new int[n];\n      sz = new int[n];\n      for (int i = 0; i < n; i++)\n      {\n         par[i] = i;\n         sz[i] = 1;\n      }\n   }\n\n   void reset(int n = 0)\n   {\n      if (par)\n         delete[] par;\n      if (sz)\n         delete[] sz;\n\n      this->n = n;\n      num_grp = n;\n\n      if (n == 0)\n      {\n         par = NULL;\n         sz = NULL;\n         return;\n      }\n\n      par = new int[n];\n      sz = new int[n];\n      for (int i = 0; i < n; i++)\n      {\n         par[i] = i;\n         sz[i] = 1;\n      }\n   }\n\n   ~DSU()\n   {\n      if (par)\n         delete[] par;\n      if (sz)\n         delete[] sz;\n   }\n\n   int find(int u)\n   {\n      return u == par[u] ? u : par[u] = find(par[u]);\n   }\n\n   void merge(int u, int v)\n   {\n      u = find(u), v = find(v);\n      if (u == v)\n         return;\n\n      if (sz[u] > sz[v])\n         swap(u, v);\n      par[u] = v;\n      sz[v] += sz[u];\n      num_grp--;\n   }\n\n   int component()\n   {\n      return num_grp;\n   }\n\n   int sz_component(int u)\n   {\n      u = find(u);\n      return sz[u];\n   }\n};\n\n\n/*\n// eg.   kruskal Algorithm(MST)\n \n   int n, m;\n   cin >> n >> m;\n\n   array<int, 3> edgeList[m];\n   for (int i = 0, u, v, w; i < m; i++)\n   {\n      cin >> u >> v >> w;\n      edgeList[i][0] = w;\n      edgeList[i][1] = u - 1;\n      edgeList[i][2] = v - 1;\n   }\n\n   sort(edgeList, edgeList + m);\n\n   int price = 0, edge = 0;\n   DSU uf(n);\n   F(&e, edgeList)\n   {\n      if (uf.find(e[1]) == uf.find(e[2]))\n         continue;\n\n      uf.merge(e[1], e[2]);\n      price += e[0];\n      edge++;\n   }\n   \n   if(edge == (n-1))\n   cout << price << el;\n   else\n   cout<<\"NO Solution\"<<el; // MST not possible\n\n*/"
C%2B%2B\snippet\LST="// LST -> Lazy Segment Tree\ntemplate <class T, class V> class LST\n{\n  private:\n    struct Node;\n\n    Node *nodes;\n    int N;\n\n    void buildTree(T arr[], int stIndex, int lo, int hi)\n    {\n        if (lo == hi)\n        {\n            nodes[stIndex].assignLeaf(arr[lo]);\n            return;\n        }\n\n        int left = 2 * stIndex, right = left + 1, mid = (lo + hi) / 2;\n        buildTree(arr, left, lo, mid);\n        buildTree(arr, right, mid + 1, hi);\n        nodes[stIndex].merge(nodes[left], nodes[right]);\n    }\n\n    Node getValue(int stIndex, int left, int right, int lo, int hi)\n    {\n        push(stIndex, left, right);\n\n        if (left == lo && right == hi)\n            return nodes[stIndex];\n\n        int mid = (left + right) / 2;\n        if (lo > mid)\n            return getValue(2 * stIndex + 1, mid + 1, right, lo, hi);\n        if (hi <= mid)\n            return getValue(2 * stIndex, left, mid, lo, hi);\n\n        Node leftResult = getValue(2 * stIndex, left, mid, lo, mid);\n        Node rightResult = getValue(2 * stIndex + 1, mid + 1, right, mid + 1, hi);\n        Node result;\n        result.merge(leftResult, rightResult);\n        return result;\n    }\n\n    int getSegmentTreeSize(int N)\n    {\n        int size = 1;\n        for (; size < N; size <<= 1)\n            ;\n        return size << 1;\n    }\n\n    void update(int stIndex, int left, int right, int lo, int hi, T value)\n    {\n        push(stIndex, left, right);\n\n        if (left == lo && right == hi)\n        {\n            nodes[stIndex].assignLazy(value);\n            push(stIndex, left, right);\n            return;\n        }\n\n        int mid = (left + right) / 2;\n        if (lo > mid)\n            update(2 * stIndex + 1, mid + 1, right, lo, hi, value);\n        else if (hi <= mid)\n            update(2 * stIndex, left, mid, lo, hi, value);\n        else\n        {\n            update(2 * stIndex, left, mid, lo, mid, value);\n            update(2 * stIndex + 1, mid + 1, right, mid + 1, hi, value);\n        }\n\n        nodes[stIndex].merge(nodes[left], nodes[right]);\n    }\n\n    void push(int stIndex, int left, int right)\n    {\n        if (nodes[stIndex].is_lazy() == false)\n            return;\n\n        T a = nodes[stIndex].lazyAssign();\n\n        if (left != right)\n        {\n            nodes[2 * stIndex].assignLazy(a);\n            nodes[2 * stIndex + 1].assignLazy(a);\n        }\n    }\n\n  public:\n    LST(T arr[], int N)\n    {\n        this->N = N;\n        nodes = new Node[getSegmentTreeSize(N)];\n        buildTree(arr, 1, 0, N - 1);\n    }\n\n    LST(vector<T> vrr)\n    {\n        const int N = vrr.size();\n        int arr[N];\n        for (int i = 0; i < N; i++)\n            arr[i] = vrr[i];\n\n        this->N = N;\n        nodes = new Node[getSegmentTreeSize(N)];\n        buildTree(arr, 1, 0, N - 1);\n    }\n\n    ~LST()\n    {\n        delete[] nodes;\n    }\n\n    V getValue(int lo, int hi)\n    {\n        Node result = getValue(1, 0, N - 1, lo, hi);\n        return result.getValue();\n    }\n\n    void update(int lo, int hi, T value)\n    {\n        update(1, 0, N - 1, lo, hi, value);\n    }\n};\n\n/*\n**  Some Importance Ideas of Lazy Segment Trees -->\n1.   T -> type of input array elements\n2.   V -> type of required aggregate statistic or data type of Node vaule\n\n** \tDefinite the Lazy Segment Tree Node -->\n1.   assignLeaf function -> Update the value of node\n2.   merge function -> Combined the nodes\n3.   getValue function -> return the value of the node\n4. \t assignLazy function -> assign the node to lazy value\n5.   is_lazy function -> it return function has lazy assign or not\n6.   lazyAssign function -> it assign lazy value to node values\n\n**  Functions of Lazy Segment Tree -->\n1.   Constructor(ar , n) -> Build the segment Tree -> arguments : array , size of array\n     Constructor(vect) -> Build the segment Tree -> arguments : vector\n2.   getVaule(lo , hi) -> return value Queries -> argument : range of zero based indexing\n3.   update(lo , hi , value) -> update the range-> argument : low  , high , update vaule\n\n**  Some example of Sum Query ->\n\t\t\n\t\tint n = 9 ;\n        int arr[n] = {2, 1, 3, 5, 4, 11, 23, 6, 2};\n\n   \t\tLST<int, int> sg(arr, n);\n\n    \tcout << sg.getValue(1, 3) << el; // Zero based index\n    \tsg.update(2, 6, 2);\n    \t\n    \tcout << sg.getValue(1, 3) << el;\n    \tcout << sg.getValue(5, 7) << el;\n\n*/\n\ntemplate <class T, class V> struct LST<T, V>::Node\n{\n    V value;\n    T lazy;\n    size_t sz;\n    bool isLazy;\n\n    Node()\n    {\n        lazy = 0;\n        isLazy = false;\n    }\n\n    void assignLeaf(T a)\n    {\n        // assign the node Depends of Node Storage\n        value = a;\n        sz = 1;\n        return;\n    }\n\n    void merge(Node a, Node b)\n    {\n        // Update according to Questions Depends of Node Storage\n        value = a.value + b.value;\n        sz = a.sz + b.sz;\n        return;\n    }\n\n    V getValue()\n    {\n        // Return the value of the node Depends of Node Storage\n        return value;\n    }\n\n    void assignLazy(T a)\n    {\n        // assign the node to lazy value\n        lazy = a;\n        isLazy = true;\n    }\n\n    bool is_lazy()\n    {\n        // return this node has lazy assign or not\n        return isLazy;\n    }\n\n    T lazyAssign()\n    {\n        // convert lazy value to node value\n        value = lazy * sz;\n        isLazy = false;\n\n        return lazy;\n    }\n};\n"
C%2B%2B\snippet\Topological="vector<int> findOrder(int n,const vector<vector<int>>& e) {\n       vector<int> gr[n];\n       vector<int> pre(n, 0);\n       for(auto &p:e)\n       {\n           pre[p[0]]++ ;\n           // v is need before u;\n           gr[p[1]].emplace_back(p[0]);\n       }\n       \n       // If you need smallest order then used min Heap\n       queue<int> q ;\n       for(int i = 0 ; i < n ; i++)\n       if(pre[i] == 0) q.push(i);\n\n       vector<int> ans ;\n       int u ;\n       while(q.size())\n       {\n           u = q.front();\n           q.pop();\n            for(auto &v : gr[u])\n            {\n                pre[v]-- ;\n                if(pre[v] == 0)\n                q.push(v);\n            }\n            ans.push_back(u);\n       }\n       \n       // If cycle present then\n       if(ans.size() < n) return vector<int>(0);\n\n       return ans ;\n}"
C%2B%2B\snippet\bellmanford="struct Edge {\n   int u, v, w;\n};\n\nvoid solve() {\n   int n, m;\n   cin >> n >> m;\n\n   vector<Edge> edges(m);\n   for (Edge &e : edges) {\n      cin >> e.u >> e.v >> e.w;\n   }\n\n   int src;\n   cin >> src;\n\n   vector<int> dist(n + 1, 1e9);\n   dist[src] = 0;\n\n   for (int i = 1; i < n; i++) {\n      for (const Edge &e : edges) {\n         dist[e.v] = min(dist[e.v], dist[e.u] + e.w);\n         dist[e.u] = min(dist[e.u], dist[e.v] + e.w);\n      }\n   }\n\n   for (const Edge &e : edges) {\n      if (dist[e.v] > dist[e.u] + e.w) {\n         cerr << \"nagative cyclic present\";\n         return;\n      }\n   }\n\n   for (int i = 1; i <= n; i++) {\n      cout << dist[i] << sp;\n   }\n\n   return;\n}\n"
C%2B%2B\snippet\bfs="void distance(int u)\n{\n    vis.assign(n, inf);\n    vis[u] = 0;\n\n    queue<int> q;\n    q.push(u);\n    while (q.size())\n    {\n        u = q.front();\n        q.pop();\n\n        for (auto &v : gr[u])\n        {\n            if (vis[v] > vis[u] + 1)\n            {\n                vis[v] = vis[u] + 1;\n                q.push(v);\n            }\n        }\n    }\n\n    return;\n}\n\nvoid multisourceDistance(vi source)\n{\n    vis.assign(n, inf);\n    queue<int> q;\n    for (auto &u : source)\n    {\n        vis[u] = 0;\n        q.push(u);\n    }\n\n    int u;\n    while (q.size())\n    {\n        u = q.front();\n        q.pop();\n\n        for (auto &v : gr[u])\n        {\n            if (vis[v] > vis[u] + 1)\n            {\n                vis[v] = vis[u] + 1;\n                q.push(v);\n            }\n        }\n    }\n\n    return;\n}\n\n/*\nint n, m;\nV<vi> gr;\nvi vis;\n\nvoid solve()\n{\n    cin >> n >> m;\n    gr.resize(n, vi(0));\n    for (int i = 0, u, v; i < m; i++)\n    {\n        cin >> u >> v;\n        u--, v--;\n\n        gr[u].pb(v);\n        gr[v].pb(u);\n    }\n\n    multisourceDistance({0});\n\n    f(i, 0, n)\n    {\n        cout << eif((vis[i] == inf), -1, vis[i]) << sp;\n    }\n    cout << el;\n\n    return;\n}\n\n\n*/"
C%2B%2B\snippet\binary="int binary(int lo, int hi, function<bool(int)> check)\n{\n    int ans = hi + 1, mid;\n    while (lo <= hi)\n    {\n        mid = (lo + hi) / 2;\n        if (check(mid))\n        {\n            ans = mid;\n            hi = mid - 1;\n        }\n        else\n        {\n            lo = mid + 1;\n        }\n    }\n\n    return ans;\n}\n/* How to used the binary function in binary search operation\n1. lower ranage = lo , higher range = hi ;\n2. check function => which respect the solution space is NNNNNYYYYY(first no then yes)\n\nauto check = [&](int mid) {\n\t// body of the check function\n\t// return true or false depend on mid ;\n}\n\n\tint ar[n] ;\neg. int ans = binary(0, n - 1, [&](int i) { return ar[i] < ar[0]; });\n\n*/\n"
C%2B%2B\snippet\bitsetSieve="const int N = 1e7 + 1;\nbitset<N> prime;\n\nvoid sieve()\n{\n    for (int i = 2, j; i * i < N; i++)\n    {\n        if (prime[i])\n            continue;\n        for (j = i * i; j < N; j += i)\n            prime.set(j);\n    }\n\n    prime.flip();\n\n    return;\n}"
C%2B%2B\snippet\bug="/*\n  General Bug ->\n\t1. not taking input (as number of test case)\n\t2. local array size declear more than 10^5\n\t3. not proven the step of algorithms and data structure\n\t4. not forming the pseudo code before code\n\t5. not do code implements optimization at first time coding\n\t6. not dry run atleast one test case with logically step wise\n\t7. do not check to double number to equal except use abs(a - b) <= 10-9\n\t\n\n*/\n"
C%2B%2B\snippet\buildin=// builtin bit function for C++\n__builtin_clz(4) // count the leading zero in a number Ans: 27\n__builtin_clzll(4) // for long long Ans: 59\n__builtin_ctz(16) // count the loading zero for a integer Ans: 4\n__builtin_ctzll(1024) // for long long\n__builtin_popcount(1203) // count the bit ones in any number Ans : 6\n__builtin_popcountll(120341ll) // for long long
C%2B%2B\snippet\coprime="// number of coprime with n with less then n number. it call phi number\n\nconst int N = 1e6 + 1;\nint phi[N];\n\nvoid coprime()\n{\n    for (int i = 0; i < N; i++)\n        phi[i] = i;\n\n    for (int i = 2, j; i < N; i++)\n        if (phi[i] == i)\n            for (j = i; j < N; j += i)\n                phi[j] -= (phi[j] / i);\n\n    return;\n}\n"
C%2B%2B\snippet\dijstra="void dijstra(int sc)\n{\n    vis.assign(n, 0);\n    dist.assign(n, inf);\n\n    dist[sc] = 0;\n    pqg<pii> p;\n    p.push(mp(0, sc));\n\n    pii fs;\n    int neigh, wg;\n    while (p.size())\n    {\n        fs = p.top();\n        p.pop();\n\n        if (vis[fs.ss])\n            continue;\n        vis[fs.ss] = 1;\n\n        for (auto &v : gr[fs.ss])\n        {\n            neigh = v.ff;\n            wg = v.ss;\n            if (dist[neigh] > dist[fs.ss] + wg)\n            {\n                dist[neigh] = dist[fs.ss] + wg;\n                p.push(mp(dist[neigh], neigh));\n            }\n        }\n    }\n\n    return;\n}\n\n/*\nint n, m;\nV<V<pii>> gr;\nvi vis;\nvi dist;\n\nvoid solve()\n{\n    cin >> n >> m;\n    gr.resize(n, V<pii>(0));\n    for (int i = 0, u, v, w; i < m; i++)\n    {\n        cin >> u >> v >> w;\n        u--, v--;\n        gr[u].pb({v, w});\n        gr[v].pb({u, w});\n    }\n\n    int sc;\n    cin >> sc;\n    dijstra(sc - 1);\n\n    f(i, 0, n) cout << dist[i] << sp;\n    cout << el;\n\n    return;\n}\n\n\n*/"
C%2B%2B\snippet\divisor="const int N = 1e7 + 1;\nint divisor[N] = {0};\n\nvoid primeDivisor()\n{\n    divisor[1] = 1;\n    for (int i = 2, j; i < N; i++)\n        if (divisor[i] == 0)\n        {\n            for (j = i; j < N; j += i)\n                if (divisor[j] == 0)\n                    divisor[j] = i;\n        }\n\n    return;\n}\n\n// All the Prime Divisor of any interger(<= 1e7) (e.g, 45 = 3*3*5)\nvector<int> APD(int a)\n{\n    vector<int> ans;\n    while (a > 1)\n    {\n        ans.pb(divisor[a]);\n        a /= divisor[a];\n    }\n    sort(ans.begin(), ans.end());\n\n    return ans;\n}\n"
C%2B%2B\snippet\exp="inline int exp(int a, int b)\n{\n   int x = 1;\n   while (b)\n   {\n      if (b & 1)\n         x *= a;\n      a *= a;\n      b >>= 1;\n   }\n   return x;\n}"
C%2B%2B\snippet\fib="using matrix = vector<vector<int>>;\nmatrix mulx(matrix &a, matrix &b)\n{\n   assert(a[0].size() == b.size());\n   if (a[0].size() != b.size())\n      return {{}};\n\n   int n = a[0].size();\n   int row = a.size(), col = b[0].size();\n\n   matrix c(row, vector<int>(col, 0));\n   for (int i = 0, j, k; i < row; i++)\n      for (j = 0; j < col; j++)\n         for (k = 0; k < n; k++)\n            c[i][j] += a[i][k] * b[k][j];\n\n   return c;\n}\n\nmatrix expx(matrix &a, int b)\n{\n   assert(a.size() == a[0].size());\n\n   int n = a.size();\n   matrix ans(n, vector<int>(n, 0));\n   for (int i = 0; i < n; i++)\n      ans[i][i] = 1;\n\n   while (b)\n   {\n      if (b & 1)\n         ans = mulx(ans, a);\n      a = mulx(a, a);\n      b >>= 1;\n   }\n\n   return ans;\n}\n\n/*\n   Assumsed Recurrence relationShip :\n   fib(n) = fib(n-1) + 2*fib(n-3) + 2*n^2 + 3\n   \n** find the Fib(n-1), Fib(n) and A matrix\n   Fib(n-1) = [fib(n-1), fib(n-2) , fib(n-3), n^2, n , 1];\n   Fib(n) = [fib(n), fib(n-1), fib(n-2) , (n+1)^2, (n+1), 1];\n   A = [ [1,0,2,2,0,3], \n         [1,0,0,0,0,0],\n         [0,1,0,0,0,0], \n         [0,0,0,1,2,1],\n         [0,0,0,0,1,1], \n         [0,0,0,0,0,1] ];\n   \n** check that relation hold  \n   Fib(n) = A*Fib(n-1);\n   \n   finding the base value of recurrence\n   and at base value n = k (order of recurrence)\n   here k = 3\n*/\nint fib(int n)\n{\n   // Fib(n) = A*Fib(n-1)\n   matrix A = {{1, 1}, {1, 0}};\n   // base value of recurrence\n   vector<int> base = {1, 1};\n   // order the recurrence\n   int k = 2;\n\n   matrix a = expx(A, n - k + 1);\n   int ans = 0;\n   for (int i = 0; i < base.size(); i++)\n      ans += a[0][i] * base[i];\n\n   return ans;\n}\n"
C%2B%2B\snippet\floydWarshell="int n, m;\n   cin >> n >> m;\n\n   int dist[n][n];\n   for (int i = 0, j; i < n; i++)\n   {\n      for (j = 0; j < n; j++)\n      {\n         dist[i][j] = eif((i == j), 0, inf);\n      }\n   }\n\n   for (int i = 0, u, v, w; i < m; i++)\n   {\n      cin >> u >> v >> w;\n      u--, v--;\n      dist[u][v] = w;\n   }\n\n   // floyd warshall algorithm\n   for (int k = 0, i, j; k < n; k++)\n      for (i = 0; i < n; i++)\n         for (j = 0; j < n; j++)\n            dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);\n   \n   // You got any pair of shortest path dist[i][j] == shortest path between i to j or j to i\n"
C%2B%2B\snippet\gcd="int gcd(int a, int b)\n{\n   if (a == 0 or b == 0)\n      return (a ^ b);\n   return __gcd(a, b);\n}\n\nvoid extendgcdUtills(int a, int b, pair<int, int> &ans)\n{\n   if (b == 0)\n   {\n      ans.first = 1;\n      ans.second = 0;\n      return;\n   }\n\n   extendgcdUtills(b, a % b, ans);\n   int x = ans.second;\n\n   ans.second = ans.first - ans.second * (a / b);\n   ans.first = x;\n\n   return;\n}\n\npair<int, int> Egcd(int a, int b, int c)\n{\n   int g = gcd(a, b);\n   \n   // answer not present if c%g != 0\n   if (c % g != 0)\n      return make_pair(0, 0);\n\n   pair<int, int> ans;\n   extendgcdUtills(a, b, ans);\n\n   int k = c / g;\n   ans.first *= k;\n   ans.second *= k;\n\n   /*\n      There are infinity solution\n      ans.first = ans.first + (b/g)*t;\n      ans.second = ans.second - (a/g)*t;\n      here t is any interger\n   */\n\n   return ans;\n}\n"
C%2B%2B\snippet\graphPrint="   for (int i = 0; i < n; i++)\n   {\n      cerr << (i + 1) << \": \";\n      for (int v : gr[i])\n         cerr << (v + 1) << sp;\n      cerr << el;\n   }"
C%2B%2B\snippet\inputGenerator="// clang-format off\nstd::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());\ninline int rdi(int l = 0, int r = 1e9){ return std::uniform_int_distribution<int>(l, r)(rng); }\n// clang-format on\n\ninline double rdd(int l = 0 , int r = 1000)\n{\n\tdouble ans = rdi(1000 , 1000*r);\n\treturn ans /1000 ;\n}\n\n// shuffle(v.begin(), v.end(), rng);  // shuffle syntex\n\nconst string a =  \"abcdefghijklmnopqrstuvwxyz\";\nconst string A =  \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst string num = \"0123456789\";\nconst string spec = \"!@#$%^&*\";\n\ninline char rdc()\n{\n\tconst string source = a ;\n\tconst int n = source.size() - 1;\n\n\treturn source[rdi(0,n)];\n}\n\ninline string rds(const int len)\n{\n\tconst string source = a + A + num + spec;\n\tconst int n = source.size() - 1 ;\n   string st;\n   st.reserve(len);\n\t\n   for (int i = 0; i < len; ++i)\n      st += alphanum[rdi(0, n)];\n   return st;\n}\n\nvector<int> rdv(int n)\n{\n   std::vector<int> v(n);\n   for (int i = 0; i < n; i++)\n      v[i] = rdi();\n   return v;\n}\n\n// Random array\nvoid rda(int arr[], int n)\n{\n   for (int i = 0; i < n; i++)\n      arr[i] = rdi();\n   return;\n}\n\nvoid distinctElements()\n{\n   int n = rdi(2, 20);\n   cout << n << el;\n\n   set<int> used;\n   for (int i = 0, x; i < n; i++)\n   {\n      do\n      {\n         x = rdi(1, 10);\n      } while (used.count(x));\n\n      cout << x << sp;\n      used.insert(x);\n   }\n   cout << el;\n\n   return;\n}\n\nvoid tree()\n{\n   int n = rdi(2, 20);\n   cout << n << el;\n\n   vector<pair<int, int>> edges;\n   for (int i = 2; i <= n; ++i)\n   {\n      edges.emplace_back(rdi(1, i - 1), i);\n   }\n\n   // rename the vertice\n   vector<int> perm(n + 1);\n   for (int i = 1; i <= n; ++i)\n   {\n      perm[i] = i;\n   }\n   random_shuffle(perm.begin() + 1, perm.end());\n\n   // random order of edges\n   random_shuffle(edges.begin(), edges.end());\n\n   for (pair<int, int> &e : edges)\n   {\n      if (rdi() % 2)\n      {\n         // random order of two vertices\n         swap(e.first, e.second);\n      }\n\n      cout << e.first << sp << e.second << el;\n   }\n}\n"
C%2B%2B\snippet\iset="#include <bits/extc++.h>\ntemplate <typename K, typename V, typename Comp = std::less<K>>\nusing imap = __gnu_pbds::tree<K, V, Comp, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;\ntemplate <typename K, typename Comp = std::less<K>> using iset = imap<K, __gnu_pbds::null_type, Comp>;\n\n\n/*\n**\tSame as Set with some Extra Feature (find_by_order , order_by_key)\n     oset<int> s;\n     s.insert(23);\n     s.insert(34);\n     s.insert(6);\n    \n**  returns an iterator to the element at a given position (0-based index)\n     auto x = s.find_by_order(2);\n     cout << *x << \"\\n\"; -> 34\n\n**  return the count the smaller element of that element\n     s.order_of_key(34); -> return 2\n     \n** You can use all other set functions like ->\n\ts.erase(25);\n*/\n"
C%2B%2B\snippet\macros="const int mod = 1e9 + 7;\nconst long long inf = mod*mod;\nconst long double ep = 0.0000001;\nconst long double pi = acos(-1.0);\n\n#define setpr(x) cout << setprecision(x) << fixed\ntemplate <typename T> using pq = priority_queue<T>;\ntemplate <typename T> using pqg = priority_queue<T, vector<T>, greater<T>>;\n"
C%2B%2B\snippet\merge="long long inversion(int ar[], int l, int r)\n{\n   if (l >= r)\n      return 0;\n\n   const int mid = (r + l) / 2;\n\n   long long ans = inversion(ar, l, mid);\n   ans += inversion(ar, mid + 1, r);\n\n   int i = l, j = mid + 1, k = 0, temp[r - l + 1];\n\n   while (i <= mid and j <= r)\n   {\n      if (ar[i] <= ar[j])\n      {\n         temp[k++] = ar[i++];\n         // inversion calculation between two array part\n         ans += j - mid - 1;\n      }\n      else\n      {\n         temp[k++] = ar[j++];\n      }\n   }\n\n   while (i <= mid)\n   {\n      temp[k++] = ar[i++];\n      // inversion calculation for first part of array due ot second part of the array\n      ans += (r - mid);\n   }\n   while (j <= r)\n   {\n      temp[k++] = ar[j++];\n   }\n\n   for (i = l, k = 0; i <= r; i++, k++)\n      ar[i] = temp[k];\n\n   return ans;\n}\n\n"
C%2B%2B\snippet\modOP="inline long long add(long long a, long long b)\n{\n    return (0ll + a % mod + b % mod) % mod;\n}\n\ninline long long sub(long long a, long long b)\n{\n    return (0ll + a % mod - b % mod + mod) % mod;\n}\n\ninline long long mul(long long a, long long b)\n{\n    return (1ll*(a % mod) * (b % mod)) % mod;\n}\n\n// little format theorem\ninline long long inv(long long a)\n{\n   int b = mod - 2;\n   long long ans = 1;\n\n   while (b)\n   {\n      if (b & 1)\n         ans = (1ll * ans * a) % mod;\n      a = (1ll * a * a) % mod;\n      b >>= 1;\n   }\n\n   return ans;\n}\n\ninline long long div(long long a, long long b)\n{\n   return (1ll*(a%mod)*(inv(b)))%mod;\n}\n\ninline long long expM(long long a, int b)\n{\n   long long ans = 1;\n   while (b)\n   {\n      if (b & 1)\n         ans = (1ll * ans * a) % mod;\n      a = (1ll * a * a) % mod;\n      b >>= 1;\n   }\n\n   return ans;\n}\n"
C%2B%2B\snippet\ncr="const int N = 200000 + 5;\nll fact[N], invfact[N];\n\nlong long invM(ll a)\n{\n   int b = mod - 2;\n   long long ans = 1;\n\n   while (b)\n   {\n      if (b & 1)\n         ans = (1ll * ans * a) % mod;\n      a = (1ll * a * a) % mod;\n      b >>= 1;\n   }\n\n   return ans;\n}\n\nvoid factorialcul()\n{\n   fact[0] = 1;\n   for (int i = 1; i < N; i++)\n   {\n      fact[i] = ((fact[i - 1] % mod) * (i % mod)) % mod;\n   }\n\n   invfact[N - 1] = invM(fact[N - 1]);\n   for (int i = N - 2; i >= 0; --i)\n   {\n      invfact[i] = ((invfact[i + 1] % mod) * (i + 1)) % mod;\n   }\n\n   return;\n}\n\nlong long ncr(ll n, ll r)\n{\n   if (r > n)\n      return 0ll;\n\n   long long res = fact[n] % mod;\n   res = (res * (invfact[n - r] % mod)) % mod;\n   res = (res * (invfact[r] % mod)) % mod;\n\n   return res;\n}\n\n"
C%2B%2B\snippet\print="// clang-format off\n#ifndef ONLINE_JUDGE\n#define prarr(a,n)std::cerr<<#a<<\" : [ \";for(int i=0;i<n;i++)std::cerr<<a[i]<<' ';std::cerr<<\"]\\n\";\n#define prmat(mat,row,col)std::cerr<<#mat<<\" :\\n\";for(int i=0;i<row;i++){for(int j=0;j<col;j++)std::cerr<<mat[i][j]<<' ';std::cerr<<'\\n';}\n#define pr(...)dbs(#__VA_ARGS__,__VA_ARGS__)\ntemplate<class T>void dbs(string str,T t){cerr<<str<<\": \"<<t<<\"\\n\";}\ntemplate<class T,class...S>void dbs(string str,T t,S... s){int idx=str.find(',');cerr<<str.substr(0,idx)<<\": \"<<t<<\",\";dbs(str.substr(idx+1),s...);}\n#define prstl(x) std::cerr << #x<<\" : \"; _p(x); std::cerr << endl;\nvoid _p(auto t) {std::cerr << t;}\ntemplate <class T, class V> void _p(std::pair <T, V> p) {std::cerr << \"{ \"; _p(p.first); std::cerr << \", \"; _p(p.second); std::cerr << \" }\";}\ntemplate <class T> void _p(std::vector <T> v) {std::cerr << \"[ \"; for (const auto &i : v) {_p(i); std::cerr << \" \";} std::cerr << \"]\";}\ntemplate <class T> void _p(std::set <T> v) {std::cerr << \"[ \"; for (const auto &i : v) {_p(i); std::cerr << \" \";} std::cerr << \"]\";}\ntemplate <class T> void _p(std::multiset <T> v) {std::cerr << \"[ \"; for (const auto &i: v) {_p(i); std::cerr << \" \";} std::cerr << \"]\";}\ntemplate <class T, class V> void _p(std::map <T, V> v) {std::cerr << \"[ \"; for (const auto &i : v) {_p(i); std::cerr << \" \";} std::cerr << \"]\";}\ntemplate <class T, class V> void _p(std::unordered_map <T, V> v) {std::cerr << \"[ \"; for (const auto &i : v) {_p(i); std::cerr << \" \";} std::cerr << \"]\";}\n#else\n#define pr(...){}\n#define prarr(a,n){}\n#define prmat(mat,row,col){}\n#define prstl(x){}\n#endif\n// clang-format on"
C%2B%2B\snippet\segment="template <class T, class V> class SegmentTree\n{\n  private:\n    struct SegmentTreeNode;\n\n    SegmentTreeNode *nodes;\n    int N;\n\n    void buildTree(T arr[], int stIndex, int lo, int hi)\n    {\n        if (lo == hi)\n        {\n            nodes[stIndex].assignLeaf(arr[lo]);\n            return;\n        }\n\n        int left = 2 * stIndex, right = left + 1, mid = (lo + hi) / 2;\n        buildTree(arr, left, lo, mid);\n        buildTree(arr, right, mid + 1, hi);\n        nodes[stIndex].merge(nodes[left], nodes[right]);\n    }\n\n    SegmentTreeNode getValue(int stIndex, int left, int right, int lo, int hi)\n    {\n        if (left == lo && right == hi)\n            return nodes[stIndex];\n\n        int mid = (left + right) / 2;\n        if (lo > mid)\n            return getValue(2 * stIndex + 1, mid + 1, right, lo, hi);\n        if (hi <= mid)\n            return getValue(2 * stIndex, left, mid, lo, hi);\n\n        SegmentTreeNode leftResult = getValue(2 * stIndex, left, mid, lo, mid);\n        SegmentTreeNode rightResult = getValue(2 * stIndex + 1, mid + 1, right, mid + 1, hi);\n        SegmentTreeNode result;\n        result.merge(leftResult, rightResult);\n        return result;\n    }\n\n    int getSegmentTreeSize(int N)\n    {\n        int size = 1;\n        for (; size < N; size <<= 1)\n            ;\n        return size << 1;\n    }\n\n    void update(int stIndex, int lo, int hi, int index, T value)\n    {\n        if (lo == hi)\n        {\n            nodes[stIndex].assignLeaf(value);\n            return;\n        }\n\n        int left = 2 * stIndex, right = left + 1, mid = (lo + hi) / 2;\n        if (index <= mid)\n            update(left, lo, mid, index, value);\n        else\n            update(right, mid + 1, hi, index, value);\n\n        nodes[stIndex].merge(nodes[left], nodes[right]);\n    }\n\n  public:\n    SegmentTree(T arr[], int N)\n    {\n        this->N = N;\n        nodes = new SegmentTreeNode[getSegmentTreeSize(N)];\n        buildTree(arr, 1, 0, N - 1);\n    }\n    \n    SegmentTree(vector<T> vrr)\n    {\n        const int N = vrr.size();\n        int arr[N];\n        for (int i = 0; i < N; i++)\n            arr[i] = vrr[i];\n\n        this->N = N;\n        nodes = new SegmentTreeNode[getSegmentTreeSize(N)];\n        buildTree(arr, 1, 0, N - 1);\n    }\n\n    ~SegmentTree()\n    {\n        delete[] nodes;\n    }\n\n    V getValue(int lo, int hi)\n    {\n        SegmentTreeNode result = getValue(1, 0, N - 1, lo, hi);\n        return result.getValue();\n    }\n\n    void update(int index, T value)\n    {\n        update(1, 0, N - 1, index, value);\n    }\n};\n\n/*\n**  Some Importance Ideas of Segment Trees -->\n1.   T -> type of input array elements\n2.   V -> type of required aggregate statistic or data type of Node vaule\n\n** \tDefinite the Segment Tree Node -->\n1.   assignLeaf function -> Update the value of node\n2.   merge function -> Combined the nodes\n3.   getValue function -> return the value of the node \n\n**  Functions of Segment Tree -->\n1.   Constructor(ar , n) -> Build the segment Tree -> arguments : array , size of array\n\t Constructor(vect) -> Build the segment Tree -> arguments : vector\n2.   getVaule(lo , hi) -> return value Queries -> argument : range of zero based indexing\n3.   update(index , value) -> update the index-> argument : index , update vaule\n    \n**  Some example of Sum Query ->\n\n\t    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8};\n\t    SegmentTree<int, int> tree(arr, 8);\n\t    cout << tree.getValue(0, 4) << '\\n';\n\t    tree.update(4, 10);\n\t    cout << tree.getValue(2, 6) << '\\n';\n\t    \n*/\n\ntemplate <class T, class V> struct SegmentTree<T, V>::SegmentTreeNode\n{\n    V value;\n\n    void assignLeaf(T a)\n    {\n    \t// assign the node Depends of Node Storage\n        value = a; \n        return;\n    }\n    \n    void merge(SegmentTreeNode a, SegmentTreeNode b)\n    {\n    \t// Update according to Questions Depends of Node Storage\n        value = a.value + b.value; \n        return;\n    }\n    \n    V getValue()\n    {\n    \t// Return the value of the node Depends of Node Storage\n        return value;\n    }\n};"
C%2B%2B\snippet\sieve="const int N = 1e6+1;\nbool prime[N];\n\nvoid sieve()\n{\n   for(int i = 2 ;i < N ;i++){\n      prime[i] = true;\n   }\n   \n   prime[0] = false;\n   prime[1] = false;\n   \n   for (int i = 2, j; i * i < N; i++)\n   {\n      if (prime[i] == false)\n         continue;\n      for (j = i * i; j < N; j += i)\n         prime[j] = false;\n   }\n\n   return;\n}"
C%2B%2B\snippet\simpleSgT="struct sgn\n{\n   int mn;\n   int ct;\n   sgn(int mni = 1e9, int cti = 0)\n   {\n      mn = mni;\n      ct = cti;\n   }\n   void merge(const sgn &l, const sgn &r)\n   {\n      if (l.mn == r.mn)\n      {\n         mn = l.mn;\n         ct = l.ct + r.ct;\n      }\n      else\n         *this = (l.mn < r.mn ? l : r);\n   }\n};\n\nsgn t[400400];\n\nvoid build(int i, int l, int r, const int ar[])\n{\n   // leave node assign\n   if (l == r)\n   {\n      t[i] = sgn(ar[l], 1);\n      return;\n   }\n\n   int mid = (l + r) / 2;\n   build(2 * i, l, mid, ar);\n   build(2 * i + 1, mid + 1, r, ar);\n   t[i].merge(t[2 * i], t[2 * i + 1]);\n}\n\nvoid update(int i, int l, int r, int pos, int val)\n{\n   if (pos < l or pos > r)\n      return;\n   if (l == r)\n   {\n      t[i] = sgn(val, 1);\n      return;\n   }\n\n   int mid = (l + r) / 2;\n   update(2 * i, l, mid, pos, val);\n   update(2 * i + 1, mid + 1, r, pos, val);\n   t[i].merge(t[2 * i], t[2 * i + 1]);\n}\n\nsgn query(int i, int l, int r, int lq, int rq)\n{\n   if (lq > r or rq < l)\n      return sgn();\n   if (lq <= l and rq >= r)\n      return t[i];\n\n   int mid = (l + r) / 2;\n   \n   // if you did not find out the empty node value\n   // if(rq <= mid)\n   //    return query(2*i, l, mid, lq,rq);\n   // if(lq > mid)\n   //    return query(2*i+1, mid+1, r, lq, rq);\n\n   sgn ans;\n   ans.merge(query(2 * i, l, mid, lq, rq), query(2 * i + 1, mid + 1, r, lq, rq));\n   return ans;\n}\n"
C%2B%2B\snippet\twoPointer="/*\nConditions to use Two pointer or sliding windows\n   1. Subarray or continuous subsequence => continuoues windows\n   2. if l < l* then r <= r*\n*/\n\n// Example for two pointer: longest subarray with given sum for non nagative element of array\nint twoPointer(int ar[], int n, int sum)\n{\n   // intial empty windows left and right side\n   int l = 0, r = 0;\n   // window value for empty windows\n   int winVal = 0;\n   // answer for intial empty window\n   int ans = 0;\n\n   while (l < n)\n   {\n      // Sliding right pointer to forward depending on condition\n      while (r < n and (winVal + ar[r] <= sum))\n      {\n         // update the window value for include the rth element(ar[r]);\n         winVal += ar[r];\n         // forward the right\n         r++; \n      }\n\n      // update the answer for this window if condition satisfy.\n      if(winVal <= sum and ans < (r-l))\n      ans = r - l ;\n\n      // moving left to one step forward\n      // non empty window\n      if (r > l) \n      {\n         // update window value for exclude the lth element(ar[l]);\n         winVal -= ar[l];\n         // forward the left\n         l++; \n      }\n      // empty window\n      else \n      {\n         // moving forward completed empty window\n         l++;\n         r++;\n      }\n   }\n\n   return ans;\n}\n\n/*\nSome Imp key points of this implement\n   1. window range [l,r) and for l == r window is empty\n   2. find the window value(winVal) for checking windows conditions and storeing the windows value\n   3. find to include and exclude the element form the windows and accordingly update the windows value\n*/"

[cf]
path=
show_toast_messages=false

[clang_format]
arguments=
program=clang-format
style=BasedOnStyle: Google\nIndentWidth: 4

[competitive_companion]
connection_port=10045
enable=true
head_comments=Problem: ${json.name}\nURL: ${json.url}\nMemory Limit: ${json.memoryLimit} MB\nTime Limit: ${json.timeLimit} ms
head_comments_powered_by_cp_editor=false
head_comments_time_format=yyyy-MM-dd HH:mm:ss
open_new_tab=true
set_time_limit_for_tab=false

[cpp]
compile_command="c++ -Wall  -std=c++17  "
compiler_output_codec=UTF-8
output_path=${tmpdir}/${basename}
parentheses=@Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0(\0\0\0\a\0)\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\0), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0{\0\0\0\a\0}\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0[\0\0\0\a\0]\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\0), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0\"\0\0\0\a\0\"\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0'\0\0\0\a\0'\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\0), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0`\0\0\0\a\0`\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\0)
run_arguments=
template_cursor_position_offset_characters=4
template_cursor_position_offset_type=start
template_cursor_position_regex=solve
template_path=/home/raj/cs/dsa/CPSetup/Main_Boiler_Template.cpp

[default_path]
action\add_pairs_of_test_cases\changes=testcase
action\add_pairs_of_test_cases\uses=${testcase}
action\custom_checker\changes=checker
action\custom_checker\uses=${checker}
action\export_and_import_settings\changes=settings
action\export_and_import_settings\uses=${settings}
action\export_and_load_session\changes=session
action\export_and_load_session\uses=${session}
action\extract_and_load_snippets\changes=snippets
action\extract_and_load_snippets\uses=${snippets}
action\load_single_test_case\changes=testcase
action\load_single_test_case\uses=${testcase}
action\open_contest\changes="contest, file, testcase, checker"
action\open_contest\uses=${contest}
action\open_file\changes="file, testcase, checker"
action\open_file\uses=${file}
action\save_file\changes="file, testcase, checker"
action\save_file\uses=${file}
action\save_test_case_to_a_file\changes=testcase
action\save_test_case_to_a_file\uses=${testcase}
names_and_paths=@Variant(\0\0\0\v\0\0\0\x2\0\0\0\xe\0\x63\0h\0\x65\0\x63\0k\0\x65\0r\0\0\0H\0/\0h\0o\0m\0\x65\0/\0r\0\x61\0j\0/\0\x63\0s\0/\0\x64\0s\0\x61\0/\0p\0r\0\x61\0\x63\0t\0i\0\x63\0\x65\0/\0\x61\0t\0\x63\0o\0\x64\0\x65\0r\0_\0\x64\0p), @Variant(\0\0\0\v\0\0\0\x2\0\0\0\xe\0\x63\0o\0n\0t\0\x65\0s\0t\0\0\0\x44\0\x43\0:\0/\0U\0s\0\x65\0r\0s\0/\0\x64\0\x65\0\x62\0r\0\x61\0/\0\x44\0\x65\0s\0k\0t\0o\0p\0/\0\x43\0P\0/\0\x43\0O\0N\0T\0\x45\0S\0T\0S), @Variant(\0\0\0\v\0\0\0\x2\0\0\0\b\0\x66\0i\0l\0\x65\0\0\0H\0/\0h\0o\0m\0\x65\0/\0r\0\x61\0j\0/\0\x63\0s\0/\0\x64\0s\0\x61\0/\0p\0r\0\x61\0\x63\0t\0i\0\x63\0\x65\0/\0\x61\0t\0\x63\0o\0\x64\0\x65\0r\0_\0\x64\0p), @Variant(\0\0\0\v\0\0\0\x2\0\0\0\x10\0s\0\x65\0t\0t\0i\0n\0g\0s\0\0\0\0), @Variant(\0\0\0\v\0\0\0\x2\0\0\0\x10\0t\0\x65\0s\0t\0\x63\0\x61\0s\0\x65\0\0\0H\0/\0h\0o\0m\0\x65\0/\0r\0\x61\0j\0/\0\x63\0s\0/\0\x64\0s\0\x61\0/\0p\0r\0\x61\0\x63\0t\0i\0\x63\0\x65\0/\0\x61\0t\0\x63\0o\0\x64\0\x65\0r\0_\0\x64\0p)

[hot_exit]
auto_save=false
auto_save_interval=20000
enable=true

[hotkey]
change_view_mode=Ctrl+J
compile=Shift+F9
compile_run=F9
format=Ctrl+I
kill=
run=Ctrl+F9
snippets=Ctrl+L

[java]
class_name=Main
compile_command=javac
compiler_output_codec=UTF-8
output_path=${tmpdir}
parentheses=@Variant(\0\0\0\t\0\0\0\x5\0\0\0\x2\0\0\0(\0\0\0\x2\0\0\0)\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\x2\0\0\0{\0\0\0\x2\0\0\0}\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\x2\0\0\0[\0\0\0\x2\0\0\0]\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\x2\0\0\0\"\0\0\0\x2\0\0\0\"\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\x2\0\0\0'\0\0\0\x2\0\0\0'\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1)
run_arguments=
run_command=java
template_cursor_position_offset_characters=0
template_cursor_position_offset_type=end
template_cursor_position_regex=
template_path=

[lsp]
args_cpp=
args_java=
args_python=-m pyls
delay_cpp=2000
delay_java=2000
delay_python=2000
path_cpp=clangd
path_java=
path_python=python
use_autocomplete_cpp=false
use_autocomplete_java=false
use_autocomplete_python=false
use_linting_cpp=true
use_linting_java=false
use_linting_python=true

[proxy]
enabled=true
host_name=127.0.0.1
password=
port=1080
type=System
user=

[python]
parentheses=@Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0(\0\0\0\a\0)\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0{\0\0\0\a\0}\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0[\0\0\0\a\0]\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0\"\0\0\0\a\0\"\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1\0\0\0\x2\0\0\0\x1), @Variant(\0\0\0\t\0\0\0\x5\0\0\0\a\0'\0\0\0\a\0'\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2\0\0\0\x2)
run_arguments=
run_command=python -u
template_cursor_position_offset_characters=0
template_cursor_position_offset_type=start
template_cursor_position_regex=
template_path=C:/Users/debra/Desktop/CP/CPSetup/Main_Boiler_Template.py

[wakatime]
api_key=
enable=false
path=wakatime
proxy=false

[yapf]
arguments=-m yapf
program=python
style="[style]\nbased_on_style = pep8"
